//=== The Protocols
=== Протоколи

//Git can use four major protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
Ґіт може використовувати чотири основних протоколи для передачі даних: Локальний, HTTP, Secure Shell (SSH) та Ґіт.
//Here we'll discuss what they are and in what basic circumstances you would want (or not want) to use them.
Тут ми розглянемо що вони таке та у яких обставинах ви бажаєте (чи не бажаєте) їх використовувати.

//==== Local Protocol
==== Локальний Протокол.

(((protocols, local)))
//The most basic is the _Local protocol_, in which the remote repository is in another directory on disk.
_Локальний протокол_ найпростіший, він потребує щоб віддалене сховище було в іншій теці на диску.
//This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.
Він часто використовується, якщо всі з вашої команди мають доступ до розподіленої файлової системи на кшталт NFS , чи в менш імовірному випадку, що всі заходять на один комп'ютер.
//The latter wouldn't be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.
Останній варіант далекий від ідеалу, адже усі копії вашого сховища перебувають на одному комп'ютері, що підвищує ймовірність катастрофічної втрати.

//If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.
Якщо у вас спільна файлова система, то ви можете клонувати, викладати до, та забирати з локального файлового сховища.
//To clone a repository like this or to add one as a remote to an existing project, use the path to the repository as the URL.
Щоб зробити клон такого сховища чи додати як віддалене сховище до існуючого проекту, достатньо використати шлях до сховища в якості URL.
//For example, to clone a local repository, you can run something like this:
Наприклад, щоб зробити клон локального сховища, ви можете виконати щось таке:

[source,console]
----
$ git clone /opt/git/project.git
----

//Or you can do this:
Чи зробити так:

[source,console]
----
$ git clone file:///opt/git/project.git
----

//Git operates slightly differently if you explicitly specify `file://` at the beginning of the URL.
Ґіт діє трошки по іншому, якщо ви явно задаєте `file://` на початку URL.
//If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
Якщо ви вкажете тільки шлях, Ґіт спробує використати тверде посилання (hardlink), або просто скопіює теку, якщо потрібно.
//If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network which is generally a lot less efficient method of transferring the data.
Якщо ви вкажете `file://`, Ґіт запустить процеси, що він зазвичай використовує для передачі даних через мережу, що зазвичай є набагато менш ефективним методом передачі даних.
//The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out – generally after an import from another version-control system or something similar (see <<_git_internals>> for maintenance tasks).
Зазвичай префікс `file://` використовують, якщо бажають отримати чисту копію сховища без зовнішніх посилань чи об'єктів – зазвичай після імпорту з іншої системи контролю версій, чи чогось подібного (дивіться <<_git_internals>> щодо завдань підтримки).
//We'll use the normal path here because doing so is almost always faster.
Ми будемо користуватись звичайним шляхом, адже це майже завжди швидше.

//To add a local repository to an existing Git project, you can run something like this:
Щоб додати локальне сховище до існуючого проекту під контролем Ґіт, ви можете виконати щось таке:

[source,console]
----
$ git remote add local_proj /opt/git/project.git
----

//Then, you can push to and pull from that remote as though you were doing so over a network.
Після цього ви можете викладати до та забирати з цього віддаленого сховища, ніби ви робите це через мережу.

//===== The Pros
===== Переваги

//The pros of file-based repositories are that they're simple and they use existing file permissions and network access.
Перевага локальних сховищ в тому, що вони прості та використовують існуючи права доступу до файлів та доступу до мережі.
//If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.
Якщо у вас вже є спільна файлова система, до якої має доступ уся ваша команда, налаштувати сховище дуже просто.
//You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.
Ви кладете очищену копію свого сховища в якесь місце, до якого всі мають доступ, та налаштовуєте права читання/запису, як і для будь-якої іншої спільної теки.
//We'll discuss how to export a bare repository copy for this purpose in <<_git_on_the_server>>.
Ми розглянемо як експортувати очищену копію сховища для цього в <<_git_on_the_server>>.

//This is also a nice option for quickly grabbing work from someone else's working repository.
Це також гарний варіант, щоб швидко взяти працю з іншого робочого сховища.
//If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you pulling down.
Якщо ваш колега працює з вами над одним проектом та ви бажаєте щось перевірити, виконати команду схожу на `git pull /home/taras/project` часто легше, ніж щоб вони викладали до віддаленого серверу, а ви з нього забирали.

//===== The Cons
===== Недоліки

//The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.
Головний недолік цього методу в тому, що налаштувати спільний доступ з декількох вузлів зазвичай складніше, ніж простий мережевий доступ.
//If you want to push from your laptop when you're at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.
Якщо ви бажаєте викладати з вашого ноутбуку, коли ви вдома, ви маєте примаунити віддалений диск, що може бути складно та повільно порівняно зі основаним на мережі доступом.

//It's also important to mention that this isn't necessarily the fastest option if you're using a shared mount of some kind.
Також важливо зазначити, що це не обов'язково найшвидша опція, якщо ви використовуєте спільний диск якогось типу.
//A local repository is fast only if you have fast access to the data.
Локальне сховище швидке тільки якщо у вас є швидкий доступ до даних.
//A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system.
Сховище на NFS зазвичай повільніше, ніж сховище через SSH на тому ж сервері, що дозволяє Ґіту працювати з локальними дисками обох систем.

//==== The HTTP Protocols
==== Протоколи HTTP

//Git can communicate over HTTP in two different modes.
Ґіт може спілкуватись через HTTP у двох режимах.
//Prior to Git 1.6.6 there was only one way it could do this which was very simple and generally read-only.
До версії 1.6.6 у Ґіта був тільки один метод, що був дуже простим та зазвичай тільки для читання.
//In version 1.6.6 a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
У версії 1.6.6 та новіших, був доданий кмітливіший протокол, що включає можливість Ґіта проводити розумну передачу даних, схожу на те, як він працює через SSH.
//In the last few years, this new HTTP protocol has become very popular since it's simpler for the user and smarter about how it communicates.
В останні декілька років, цей новий протокол HTTP став дуже розповсюдженим, адже він простіший для користувача та кмітливиший щодо методу передачі.
//The newer version is often referred to as the ``Smart'' HTTP protocol and the older way as ``Dumb'' HTTP.
Новішу версію часто називають ``Розумним'' HTTP протоколом, а старішу ``Тупим'' HTTP
//We'll cover the newer ``smart'' HTTP protocol first.
Ми спочатку поговоримо про ``розумний'' HTTP протокол.

//===== Smart HTTP
===== Розумний HTTP

(((protocols, smart HTTP)))
//The ``smart'' HTTP protocol operates very similarly to the SSH or Git protocols but runs over standard HTTP/S ports and can use various HTTP authentication mechanisms, meaning it's often easier on the user than something like SSH, since you can use things like username/password basic authentication rather than having to set up SSH keys.
``Розумний'' HTTP діє дуже схоже на те, як працює SSH чи Ґіт протоколи, проте працює через звичайні HTTP/S порти та може використовувати різноманітні механізми авторизації HTTP, отже часто цей метод простіший для користувачів, ніж SSH, адже можна використовувати логін/пароль базової авторизації замість налаштування ключів SSH.

//It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the `git://` protocol, and can also be pushed over with authentication and encryption like the SSH protocol. Instead of having to set up different URLs for these things, you can now use a single URL for both. If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password. The same goes for read access.
Розумний HTTP напевно став найпопулярнішим методом використання Ґіта, адже його можна налаштувати як для анонімної праці, як протокол `git://`, та до нього можна викладати з авторизацією та шифрування, як і з SSH протоколом. Замість налаштування різних URLів для цих речей, ви можете використовувати для них однин URL. Якщо ви спробуєте викласти, а сховище вимагає авторизації (як зазвичай і повинно бути), сервер запитає логін та пароль. Те ж саме стосується і доступу на читання.

//In fact, for services like GitHub, the URL you use to view the repository online (for example, ``https://github.com/schacon/simplegit[]'') is the same URL you can use to clone and, if you have access, push over.
Насправді, для таких сервісів як GitHub, URL, що ви використовуєте для перегляду сховища в мережі (наприклад, ``https://github.com/schacon/simplegit[]'') збігається з URLом, що ви можете використовувати для клонування, та, якщо у вас є доступ, викладати до нього.

//===== Dumb HTTP
===== Тупий HTTP

(((protocols, dumb HTTP)))
//If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler ``dumb'' HTTP protocol.
Якщо сервер не відповідає на розумний сервіс HTTP, клієнт Ґіта спробує відкотитись до простішого ``тупого'' HTTP протоколу.
//The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
Тупий протокол очікує, що очищене сховище Ґіт буде обслуговуватись як звичайні файли на веб сервері.
//The beauty of the Dumb HTTP protocol is the simplicity of setting it up.
Краса тупого протоколу HTTP в простоті його налаштування.
//Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you're done (See <<_git_hooks>>).
Вам треба просто викласти очищене сховище Ґіт під коренем документів HTTP та встановити потрібний гачок (хук, `hook`) `post-update`, ось і все (Дивіться <<_git_hooks>>).
//At that point, anyone who can access the web server under which you put the repository can also clone your repository.
Після цього, усі, в кого є доступ до веб серверу, на котрий ви скопіювали своє сховище, можуть зробити його клон.
//To allow read access to your repository over HTTP, do something like this:
Щоб дати доступ на читання вашого сховища через HTTP, зробіть щось таке:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

//That's all.(((hooks, post-update)))
Ось і все.(((hooks, post-update)))
//The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
Гачок `post-update` входить у стандартну поставку Ґіта, та виконує відповідні команди (`git update-server-info`), щоб HTTP діставання та клонування працювало правильно.
//This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like
Ця команда виконується, коли ви викладаєте до цього сховища (можливо через SSH). Тоді інші люде люди зможуть клонувати за допомогою

[source,console]
----
$ git clone https://example.com/gitproject.git
----

//In this particular case, we're using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server – just put the bare repository in its path.
Саме у цьому випадку, ми використовуємо шлях `/var/www/htdocs`, що є звичайним для серверів Apache, проте ви можете використовувати статичний веб сервер – просто покладіть очищене сховище до нього.
//The Git data is served as basic static files (see <<_git_internals>> for details about exactly how it's served).
Дані Ґіт видаються як прості статичні файли (дивіться <<_git_internals>> для докладнішої розповіді про те, як саме вони видаються)
//Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner. It's rare to run a mix of the two services.
Зазвичай ви або виберете Розумний HTTP сервер з можливістю читання/запису, або просто організуєте доступ до файлів з правом тільки на читання за допомогою Тупої опції. Дуже рідко ці два варіанти суміщають.

//===== The Pros
===== Переваги

//We'll concentrate on the pros of the Smart version of the HTTP protocol.
Ми зосередимось на перевагах Розумної версії HTTP протоколу.

//The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Простота використання одного URL для всіх типів доступу та те, що сервер потребує авторизації тільки коли потрібно робить користування сервером дуже простим для користувача.
//Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
Можливість авторизації з логіном та паролем також велика перевага над SSH, оскільки користувачі не мають генерувати SSH ключі локально та завантажувати публічний ключ до серверу до того, як вони зможуть взаємодіяти з ним.
//For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
Для менш досвідчених користувачів, чи користувачів, що використовують системи де SSH менш розповсюджений, це може стати головною перевагою в зручності.
//It is also a very fast and efficient protocol, similar to the SSH one.
Це також дуже швидкий та ефективний протокол, схожий на SSH.

You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.

Another nice thing is that HTTP/S are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.

===== The Cons

Git over HTTP/S can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over the ``Smart'' HTTP protocol for serving Git.

If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH. There are however several credential caching tools you can use, including Keychain access on OSX and Credential Manager on Windows, to make this pretty painless. Read <<_credential_caching>> to see how to set up secure HTTP password caching on your system.

==== The SSH Protocol

(((protocols, SSH)))
A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places – and if it isn't, it's easy to do.
SSH is also an authenticated network protocol; and because it's ubiquitous, it's generally easy to set up and use.

To clone a Git repository over SSH, you can specify ssh:// URL like this:

[source,console]
----
$ git clone ssh://user@server/project.git
----

Or you can use the shorter scp-like syntax for the SSH protocol:

[source,console]
----
$ git clone user@server:project.git
----

You can also not specify a user, and Git assumes the user you're currently logged in as.

===== The Pros

The pros of using SSH are many.
First, SSH is relatively easy to set up – SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure – all data transfer is encrypted and authenticated.
Last, like the HTTP/S, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.

===== The Cons

The negative aspect of SSH is that you can't serve anonymous access of your repository over it.
People must have access to your machine over SSH to access it, even in a read-only capacity, which doesn't make SSH access conducive to open source projects.
If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch over.

==== The Git Protocol

(((protocols, git)))
Next is the Git protocol.
This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
In order for a repository to be served over the Git protocol, you must create the `git-daemon-export-ok` file – the daemon won't serve a repository without that file in it – but other than that there is no security.
Either the Git repository is available for everyone to clone or it isn't.
This means that there is generally no pushing over this protocol.
You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project's URL could push to your project.
Suffice it to say that this is rare.

===== The Pros

The Git protocol is often the fastest network transfer protocol available.
If you’re serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it’s likely that you'll want to set up a Git daemon to serve your project.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.

===== The Cons

The downside of the Git protocol is the lack of authentication.
It's generally undesirable for the Git protocol to be the only access to your project.
Generally, you'll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
It's also probably the most difficult protocol to set up.
It must run its own daemon, which requires `xinetd` configuration or the like, which isn't always a walk in the park.
It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
Behind big corporate firewalls, this obscure port is commonly blocked.
