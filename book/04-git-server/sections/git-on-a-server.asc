[[_git_on_the_server]]
//=== Getting Git on a Server
=== Отримання Git на сервері

//Now we'll cover setting up a Git service running these protocols on your own server.
Тепер ми розглянемо налаштування сервісу Git з цими протоколами на вашому власному сервері.

[NOTE]
====
//Here we'll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux based server, though it's also possible to run these services on Mac or Windows servers too.
Тут ми продемонструємо команди та кроки, що потрібні для базового, спрощеного встановлення на базовому Linux сервері, хоча ці сервіси також можуть працювати під Mac або Windows серверами.
//Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what's involved.
Насправді налаштування виробничого серверу у вашій інфраструктурі безперечно буде накладати відмінності у міри безпеки чи в роботі з системними утилітами, проте сподіваємось, що ця секція дасть вам загальне уявлення про процес.
====

//In order to initially set up any Git server, you have to export an existing repository into a new bare repository – a repository that doesn't contain a working directory.
Щоб налаштувати сервер Git, спочатку треба експортувати існуюче сховище до нового очищеного сховища – сховища, що не містить робочої теки.
//This is generally straightforward to do.
Це доволі просто зробити.
//In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.(((git commands, clone, bare)))
Щоб зробити клон вашого сховища та створити нове очищене сховище, треба виконати команду clone з опцією `--bare`.(((git commands, clone, bare)))
//By convention, bare repository directories end in `.git`, like so:
За умовною домовленістю, теки очищених сховищ закінчуються на `.git`, наприклад:

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

//You should now have a copy of the Git directory data in your `my_project.git` directory.
Тепер у вас є копія даних теки Git у теці `my_project.git`.

//This is roughly equivalent to something like
Це майже рівнозначно виконанню

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

//There are a couple of minor differences in the configuration file; but for your purpose, this is close to the same thing.
Є декілька незначних відмінностей у файлі конфігурації, проте для наших цілей, це майже одне й те саме.
//It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.
Ми беремо саме сховище Git, без робочої теки, та створюємо теку спеціально і тільки для нього.

[[_bare_repo]]
//==== Putting the Bare Repository on a Server
==== Розміщення очищеного сховища на сервер

//Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
Тепер, коли у вас є очищена копія вашого сховища, все, що вам потрібно зробити – це розмістити його на сервері та налаштувати протоколи.
//Let's say you've set up a server called `git.example.com` that you have SSH access to, and you want to store all your Git repositories under the `/opt/git` directory.
Припустимо, ви налаштували сервер за назвою `git.example.com`, до якого у вас є SSH доступ, та ви бажаєте зберігати усі ваші сховища Git під текою `/opt/git`.
//Assuming that `/opt/git` exists on that server, you can set up your new repository by copying your bare repository over:
Якщо тека `/opt/git` вже існує на сервері, ви можете налаштувати своє нове сховище, просто копіюванням вашого очищеного сховища:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/opt/git
----

//At this point, other users who have SSH access to the same server which has read-access to the `/opt/git` directory can clone your repository by running
Наразі, інші користувачі що мають SSH доступ до цього серверу, та мають доступ тільки на читання теки `/opt/git` можуть зробити клон вашого сховища, виконавши

[source,console]
----
$ git clone user@git.example.com:/opt/git/my_project.git
----

//If a user SSHs into a server and has write access to the `/opt/git/my_project.git` directory, they will also automatically have push access.
Якщо користувач зайде через SSH до серверу та має доступ на запис до теки `/opt/git/my_project.git`, він автоматично матиме право викладати зміни.

//Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.(((git commands, init, bare)))
Git автоматично додасть групові права на запис до сховища вірно, якщо ви виконаєте команду `git init` з опцією `--shared`.(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /opt/git/my_project.git
$ git init --bare --shared
----

//You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.
Бачите як просто взяти сховище Git, створити його очищену версію, та розмістити її на сервері, до якого ви та ваші колеги мають SSH доступ.
//Now you're ready to collaborate on the same project.
Тепер ви готові до співпраці над одним проектом.

//It's important to note that this is literally all you need to do to run a useful Git server to which several people have access – just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
Важливо зазначити, що це літерально все, що вам потрібно щоб отримати працюючий корисний Git сервер, до якого мають доступ декілька людей – просто додайте SSH акаунти на сервері, та закиньте кудись очищене сховище, до якого всі користувачі мають доступ на читання та запис.
//You're ready to go – nothing else needed.
Ось і все – більше нічого не треба.

//In the next few sections, you'll see how to expand to more sophisticated setups.
У декількох наступних секціях, ви побачите як перейти до більш витончених схем.
//This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
Ми розглянемо як не створювати акаунти для кожного користувача, як додати відкритий доступ на читання сховища, налаштування веб інтерфейсу та інше.
//However, keep in mind that to collaborate with a couple of people on a private project, all you _need_ is an SSH server and a bare repository.
Втім, пам’ятайте, що для співпраці з декількома людьми над закритим проектом, усе що _треба_ – це SSH сервер та очищене сховище.

//==== Small Setups
==== Маленькі проекти

//If you're a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
Якщо ви маленька контора, або ви просто випробовуєте Git у вашій організації, та маєте тільки кількох програмістів, усе дуже просто.
//One of the most complicated aspects of setting up a Git server is user management.
Один з найскладніших аспектів налаштування серверу Git – це керування користувачами.
//If you want some repositories to be read-only to certain users and read/write to others, access and permissions can be a bit more difficult to arrange.
Якщо ви бажаєте, щоб якісь сховища були доступні на читання деяким користувачам, а на читання та запис іншим, налаштувати доступ та права може бути трохи складніше.

//===== SSH Access
===== SSH доступ

(((serving repositories, SSH)))
//If you have a server to which all your developers already have SSH access, it's generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
Якщо у вас є сервер, до якого всі ваші програмісти вже мають SSH доступ, зазвичай найпростіше встановити ваше перше сховище там, адже вам майже нічого не доведеться робити (як ми побачимо у наступній секцій).
//If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of the operating system your server runs.
Якщо вам потрібен складніший контроль над доступом та правами до вашого сховища, ви можете з ними впоратися за допомогою звичайних прав файлової системи, на якій розташоване ваше сховище.

//If you want to place your repositories on a server that doesn't have accounts for everyone on your team whom you want to have write access, then you must set up SSH access for them.
Якщо ви бажаєте розмістити ваші сховища на сервері, до якого не у всіх з вашої команди, у кого має бути доступ на запис, є акаунти, вам треба налаштувати SSH доступ для них.
//We assume that if you have a server with which to do this, you already have an SSH server installed, and that's how you're accessing the server.
Ми далі припускаємо, що на вашому сервері SSH сервер вже є встановленим, та ви саме так заходите на сервер.

//There are a few ways you can give access to everyone on your team.
Є декілька способів надати доступ усій вашій команді.
//The first is to set up accounts for everybody, which is straightforward but can be cumbersome.
Ви можете просто додати акаунти всім, що є найпростішим варіантом, проте може бути трудомістким варіантом.
//You may not want to run `adduser` and set temporary passwords for every user.
Ви можете не захотіти виконувати `adduser` та встановлювати тимчасові паролі для кожного користувача.

//A second method is to create a single 'git' user on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of your new 'git' user.
Другий метод – це створити єдиного користувача 'git', попросити кожного користувача, у котрого має бути доступ на запис відправити вам публічний ключ SSH, та додати всі ключі до файлу `~/.ssh/authorized_keys` вашого нового користувача 'git'.
//At that point, everyone will be able to access that machine via the 'git' user.
Після цього, усі будуть мати доступ до машини через користувача 'git'.
//This doesn't affect the commit data in any way – the SSH user you connect as doesn't affect the commits you've recorded.
Це ніяким чином не впливає на дані фіксації – користувач SSH, з якого ви підключаєтесь, не впливає на фіксації, що ви записуєте.

//Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.
Інший спосіб це зробити щоб SSH сервер авторизувався з LDAP серверу чи іншого централізованого джерела авторизації, що у вас може бути вже встановленим.
