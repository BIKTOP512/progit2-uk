//=== Smart HTTP
=== Розумний HTTP

(((serving repositories, HTTP)))
//We now have authenticated access though SSH and unauthenticated access through `git://`, but there is also a protocol that can do both at the same time.
Ми вже маємо авторизований доступ через SSH та неавторизований через `git://`, проте існує ще протокол, котрий може працювати в обох варіантах одночасно.
//Setting up Smart HTTP is basically just enabling a CGI script that is provided with Git called `git-http-backend` on the server.(((git commands, "http-backend")))
Налаштування Розумного HTTP потрибує лише ввімкнути CGI скрипт, що входить в пакет Git під назвою `git-http-backent`, на вашому сервері.(((git commands, "http-backend")))
//This CGI will read the path and headers sent by a `git fetch` or `git push` to an HTTP URL and determine if the client can communicate over HTTP (which is true for any client since version 1.6.6).
Цей CGI буде читати шлях та заголовки, що їх відправили `git fetch` чи `git push` до HTTP URL та визначати, чи клієнт в змозі спілкуватися через HTTP (що є правдою для будь-якого клієнту після версії 1.6.6).
//If the CGI sees that the client is smart, it will communicate smartly with it, otherwise it will fall back to the dumb behavior (so it is backward compatible for reads with older clients).
Якщо CGI визначив, що клієнт розумний, він буде з ним спілкуватися розумно, інакше доведеться використовувати тупу поведінку (отже він зворотньо сумісний для читання з старіших клієнтів).

//Let's walk through a very basic setup. We'll set this up with Apache as the CGI server. If you don't have Apache setup, you can do so on a Linux box with something like this:(((Apache)))
Давайте покроково розглянемо дуже просту схему налаштування. Ми використаємо Apache в якості CGI серверу. Якщо у вас немає Apache, ви можете його встановити на Linux машині приблизно так:(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

//This also enables the `mod_cgi`, `mod_alias`, and `mod_env` modules, which are all needed for this to work properly.
Ця команда також вмикає модулі `mod_cgi`, `mod_alias` та `mod_env`. Вони всі необхідні для правильної роботи розумного HTTP.

//Next we need to add some things to the Apache configuration to run the `git-http-backend` as the handler for anything coming into the `/git` path of your web server.
Далі нам треба додати дещо до конфігурації Apache, щоб `git-http-backend` обробник для будь-якого шляху на вашому веб сервері, що закінчується на `/git`.

[source,console]
----
SetEnv GIT_PROJECT_ROOT /opt/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/
----

//If you leave out `GIT_HTTP_EXPORT_ALL` environment variable, then Git will only serve to unauthenticated clients the repositories with the `git-daemon-export-ok` file in them, just like the Git daemon did.
Якщо ви пропустите змінну середовища `GIT_HTTP_EXPORT_ALL, Git погодиться роздавати неавторизованим користувачам тільки сховища з файлом `git-daemon-export-ok`, як робить і демон Git.

//Then you'll have to tell Apache to allow requests to that path with something like this:
Тепер вам треба сказати Apache дозволяти запити до цього шляху, якось так:

[source,console]
----
<Directory "/usr/lib/git-core*">
   Options ExecCGI Indexes
   Order allow,deny
   Allow from all
   Require all granted
</Directory>
----

//Finally you'll want to make writes be authenticated somehow, possibly with an Auth block like this:
Наостанок, ви бажаєте, щоб для запису була потрібна якась авторизація, можливо схожий на цей блок Auth:

[source,console]
----
<LocationMatch "^/git/.*/git-receive-pack$">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /opt/git/.htpasswd
    Require valid-user
</LocationMatch>
----

//That will require you to create a `.htaccess` file containing the passwords of all the valid users. Here is an example of adding a ``schacon'' user to the file:
Щоб це працювало необхідно створити файл `.htaccess` з паролями дозволених користувачів. Ось приклад того, як можна додати користувача ``lesja'' до цього файлу:

[source,console]
----
$ htdigest -c /opt/git/.htpasswd "Git Access" lesja
----

//There are tons of ways to have Apache authenticate users, you'll have to choose and implement one of them. This is just the simplest example we could come up with. You'll also almost certainly want to set this up over SSL so all this data is encrypted.
Існує безліч методів авторизації в Apache, вам доведеться вибрати та використати один з них. У цій секції ми навели найпростіший приклад, який тільки могли вигадати. Також ви безсумнівно захочете налаштувати шифрування даних через SSL.

//We don't want to go too far down the rabbit hole of Apache configuration specifics, since you could well be using a different server or have different authentication needs.
//The idea is that Git comes with a CGI called `git-http-backend` that when invoked will do all the negotiation to send and receive data over HTTP.
//It does not implement any authentication itself, but that can easily be controlled at the layer of the web server that invokes it.
//You can do this with nearly any CGI-capable web server, so go with the one that you know best.
Ми не бажаємо занадто багато розглядати конфігурацію Apache, адже цілком можливо, що ви будете використовувати інший сервер, чи у вас інші потреби авторизації.
Суть в тому, що Git поставляє CGI скрипт `git-http-backent`, який може відправляти та приймати дані Git через HTTP.
Він не реалізує авторизацію сам, проте авторизацію легко контролювати на рівні веб серверу, що його викликає.
Це дозволяє майже кожен веб сервер, що підтримує CGI, отже використовуйте той, що ви найкраще знаєте.


[NOTE]
====
//For more information on configuring authentication in Apache, check out the Apache docs here: http://httpd.apache.org/docs/current/howto/auth.html[]
За докладнішою інформацією щодо конфігурації авторизації в Apache, дивитесь документацію Apache за адресою: http://httpd.apache.org/docs/current/howto/auth.html[]
====
