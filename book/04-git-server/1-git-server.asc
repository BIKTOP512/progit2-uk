//== Git on the Server
== Ґіт на Сервері

(((serving repositories)))
//At this point, you should be able to do most of the day-to-day tasks for which you'll be using Git.
Наразі, ви маєте бути в змозі виконувати більшість повсякденних задач, які вам зустрінуться при використанні Ґіта.
//However, in order to do any collaboration in Git, you'll need to have a remote Git repository.
Втім, щоб мати можливість співпрацювати за допомогою Ґіта, вам треба мати віддалене сховище Ґіт.
//Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they're working on if you're not careful.
Хоч ви й можете викладати та забирати зміни зі сховищ кожної людини, це не рекомендується, адже так дуже легко заплутатися в тому, хто що робить, якщо не бути дуже обережним.
//Furthermore, you want your collaborators to be able to access the repository even if your computer is offline – having a more reliable common repository is often useful.
До того ж, якщо ви бажаєте, щоб ваші колеги мали доступ до сховища навіть коли ваш комп'ютер поза мережею, мати більш надійне спільне сховище зазвичай розумно.
//Therefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that.
Отже, зазвичай для співпраці з ким-небудь налаштовують проміжне сховище, до якого ви обидва маєте доступ, та викладаєте до і забираєте з нього.

//Running a Git server is fairly straightforward.
Запустити Ґіт сервер доволі просто.

//First, you choose which protocols you want your server to communicate with.
Спершу вам треб обрати протокол, яким ви бажаєте щоб ваш сервер спілкувався.
//The first section of this chapter will cover the available protocols and the pros and cons of each.
У першій секції цього розділу ми розповімо про доступні протоколи, переваги та недоліки кожного.
//The next sections will explain some typical setups using those protocols and how to get your server running with them.
Наступна секція пояснить деякі типові схеми використання цих протоколів та як змусити ваш сервер з ними працювати.
//Last, we'll go over a few hosted options, if you don't mind hosting your code on someone else's server and don't want to go through the hassle of setting up and maintaining your own server.
В останній, ми поговоримо про деякі опції хостингу, якщо ви не проти зберігати ваш код на чужому сервері, та не бажаєте мати клопіт зі встановленням та підтримкою вашого власного серверу.

//If you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment.
Якщо вас не цікавить запуск власного серверу, ви можете відразу перейти до останньої секції розділу, щоб побачити деякі варіанти налаштування хостингу та переходити до наступного розділу, де ми розглянемо різноманітні деталі роботи в середовищі розподіленої системи контролю коду.

//A remote repository is generally a _bare repository_ – a Git repository that has no working directory.
Віддалене сховище зазвичай _очищене сховище_ - сховище Ґіт, що не має робочої теки.
//Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it's just the Git data.
Адже сховище використовується тільки як місце для співпраці, нема підстав мати копію знімку на диску. Там просто дані Ґіт.
//In the simplest terms, a bare repository is the contents of your project's `.git` directory and nothing else.
Найпростішими словами, очищене сховище містить тільки зміст теки `.git` вашого проекту та більше нічого.

include::sections/protocols.asc[]

include::sections/git-on-a-server.asc[]

include::sections/generating-ssh-key.asc[]

include::sections/setting-up-server.asc[]

include::sections/git-daemon.asc[]

include::sections/smart-http.asc[]

include::sections/gitweb.asc[]

include::sections/gitlab.asc[]

include::sections/hosted.asc[]

//=== Summary
=== Підсумок

//You have several options to get a remote Git repository up and running so that you can collaborate with others or share your work.
У вас декілька варіантів, як отримати працююче віддалене Ґіт сховище, щоб співпрацювати з іншими або надати доступ до своєї праці.
//Running your own server gives you a lot of control and allows you to run the server within your own firewall, but such a server generally requires a fair amount of your time to set up and maintain.
Використання власного серверу дає вам повний контроль та дозволяє налаштовувати ваш власний мережевий екран (firewall), проте такий сервер зазвичай вимагає немало вашого часу для налаштування та підтримки.
//If you place your data on a hosted server, it's easy to set up and maintain; however, you have to be able to keep your code on someone else's servers, and some organizations don't allow that.
Якщо ви розмістите ваші дані на серверу хостера, його легко налаштувати та підтримувати. Проте, вам доведеться зберігати код на чужому сервері, та деякі організації цього не дозволяють.

//It should be fairly straightforward to determine which solution or combination of solutions is appropriate for you and your organization.
Має бути доволі просто визначити, яке рішення чи комбінація рішень влаштовують вас або вашу організацію.
