[[_plumbing_porcelain]]
=== Сантехніка та кераміка

Ця книга охоплює використання Git за допомогою близько трьох десятків команд, таких як `checkout`, `branch`, `remote` й інших. Та оскільки Git спершу був більше інструментом для СКВ, ніж повною СКВ, дружньою користувачеві, то існують багато команд, які здійснюють низькорівневу роботу і були створені для послідовного використання у стилі UNIX або використання у скриптах.
Ці команди зазвичай називають ’службовими’ («plumbing» — трубопровід, сантехніка), а орієнтовані на користувача — ’користувацькими’ («porcelain» — кераміка, порцеляна, фарфор)

Перші дев’ять розділів книги були присвячені переважно користувацьким командам.
У цьому розділі розглядатимуться саме низькорівневі службові команди, які дають можливість контролю внутрішніх процесів Git, та допоможуть продемонструвати як і чому Git працює саме так, а не інакше.
Багато з цих команд призначені не для ручного використання з командного рядка, а будуть блоками для побудови нових інструментів та користувацьких скриптів.

Коли ви виконуєте `git init` у новій чи існуючій теці, Git створює теку `.git`, де знаходиться практично усе, що Git зберігає і чим оперує.
Якщо вам необхідно зробити резервну копію чи клон свого репозиторія, копіювання лиш цієї теки в інше місце дає вам майже усе, що необхідно.
Даний розділ присвячений вмісту цієї теки.
А ось так вона виглядає:

[source,console]
----
$ ls -F1
HEAD
config*
description
hooks/
info/
objects/
refs/
----

Там можуть бути й деякі інші файли, вищенаведений приклад є свіжим репозиторієм — це те, що ви типово бачитимете безпосередньо після виконання `git init`.
Файл `description` використовується тільки програмою GitWeb, не звертайте на нього увагу.
Файл `config` містить конфігураційні параметри, специфічні саме для конкретного репозиторія, а в теці `info` знаходиться файл (((excludes))) з глобальними налаштуваннями ігнорування файлів — він дозволяє виключити шляхи, які ви не бажаєте додавати у файл .gitignore.
Тека `hooks` містить клієнтські та серверні скрипти-тригери, які були детальніше розглянуті у розділі <<_git_hooks>>.

Лишилися ще чотири важливі елементи: файли `HEAD` та (ще не створений) `index`, і теки `objects` й `refs`.
Це основні складові Git.
У теці `objects` зберігаються увесь вміст вашої бази даних, тека `refs` містить вказівники на об’єкти комітів у цих даних (гілках), а в файлі `index` зберігається вміст індексу.
Тепер ми детально розберемося з цими трьома елементами, щоб зрозуміти як працює Git.
