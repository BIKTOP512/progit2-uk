=== Супроводжування проекту

(((maintaining a project)))
Окрім знань щодо того, як ефективно зробити внесок до проекту, вам можливо знадобиться вміння супроводжувати його.
Це може включати прийняття та застосування латок, які були згенеровані `format-patch` та надіслані вам поштою, або інтегрувати зміни з віддалених гілок зі сховища, яке ви додали були додали як віддалене для вашого проекту.
Чи ви супроводжуєте канонічний репозиторій, чи бажаєте допомогти перевіряти чи схвалювати латки, вам треба знати, як приймати роботу в спосіб, який є найзрозумілішим для інших учасників та щоб ви були в змозі підтримувати його у майбутньому.

==== Робота з тематичними гілками

(((branches, topic)))
Коли ви збираєтесь інтегрувати нову роботу, зазвичай слушно випробувати її в тематичній гілці – тимчасова гілка, спеціально створена для перевірки нової роботи.
У такому разі буде легко окремо налаштовувати латку та облишити її, якщо вона не працює, доки не зʼявиться час щоб повернутися до неї.
Якщо ви виберете просте імʼя для гілки, яке засноване на тематиці роботи, яку ви збираєтесь випробувати, наприклад `ruby_client` чи щось не менш змістовне, то легко зможете пригадати його, якщо ви покинули її на деякий час та вирішили повернутись до неї пізніше.
Супроводжувач проекту Git переважно також розподіляють ці гілки по просторам імен – на кшталт `sc/ruby_client`, де `sc` є скороченням від імені автора роботи.
Як ви памʼятаєте, ви можете відгалузити гілку від вашого master таким чином:

[source,console]
-----
$ git branch sc/ruby_client master
-----

Або, якщо ви бажаєте відразу до неї переключитися, то можете використати `checkout -b`:

[source,console]
-----
$ git checkout -b sc/ruby_client master
-----

Тепер ви готові додати внесок до цієї театичної гілки та визначити, чи варто це зливати до довготриваліших гілок.

[[_patches_from_email]]
==== Застосування латок отриманих поштою

(((email, applying patches from)))
Якщо ви отримали латку через електронну пошту та потрібно її інтегрувати до проекту, то треба застосувати латку в тематичній гілці, щоб перевірити її.
Є два методи застосувати надіслану латку: за допомогою `git apply` або `git am`.

===== Застосування латки за допомогою apply

(((git commands, apply)))
Якщо ви отримали латко від когось, хто згенерував її командою `git diff` або командою Unix `diff` (не рекомендовано; дивіться наступну підсекцію), то її можна застосувати за допомогою команди `git apply`.
Припускаючи, що латку збережено в `/tmp/patch-ruby-client.patch`, її можна застосувати наступним чином:

[source,console]
-----
$ git apply /tmp/patch-ruby-client.patch
-----

Це змінює файли у вашій робочій директорії.
Це майже те саме, що виконати команду `patch -p1`, щоб застосувати латку, хоча він є більш пароноїдальним та приймає менше невизначених збігів, ніж patch.
Він також опрацьовує додавання, вилучення та перейменування файлів, якщо вони описані в форматі `git diff`, чого `patch` не зробить.
Нарешті, `git apply` працює за принципом ``застосувати все або скасувати все'': буде застосовано все або нічого, у той час як `patch` може частково застосувати латки, залишивши робочу директорію в дивному стані.
Загалом `git apply` набагато консервативніший, ніж `patch`.
Він не створить для вас коміт – після виконання, вам доведеться індексувати та зберегти нові зміни вручну.

Ви також можете використати git apply щоб побачити, чи латка може бути застосована чисто перед тим, як власно намагатись справді застосувати її – ви можете виконати `git apply --check` з латкою:

[source,console]
-----
$ git apply --check 0001-seeing-if-this-helps-the-gem.patch
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
-----

Якщо вивід порожній, то латка має застосуватися чисто.
Ця команда також виходить з не нульовим статусом, якщо перевірка зазнає невдачі, отже її можна використовувати в скриптах, якщо забажаєте.

[[_git_am]]
===== Застосування латки за допомогою `am`

(((git commands, am)))
Якщо автор змін є користувачем Git та був достатньо добрим, щоб використати команду `format-patch` задля генерації латки, то ваше завдання буде легшим, адже латка містить інформацію про автора та повідомлення коміту.
Якщо можете, заохочуйте ваших розробників використовувати `format-patch` замість `diff` для генерації латок для вас.
Ви маєте використовувати `git apply` лише для застарілих латок та тому подібних речей.

Щоб застосувати латку, що її згенерувала `format-patch`, скористуйтесь `git am`.
Технічно, `git am` створено щоб прочитати файл mbox, що є простим, текстовим форматом для збереження одного чи більше поштових повідомлень в одному текстовому файлі.
Виглядає він приблизно так:

[source,console]
-----
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] add limit to log function

Limit log functionality to the first 20
-----

Це початок виводу команди format-patch, яку ви бачили у попередній секції.
Це також відповідаю поштовому формату mbox.
Якщо хтось правильно надіслав вам латку, використовуючи git send-email, та ви завантажили її у форматі mbox, то ви можете вказати git цей mbox файл, та він розпочне застосовувати всі латки, які зустріне.
Якщо ви користуєтесь поштовим клієнтом, який може зберегти декілька листів у mbox форматі, то можете зберегти всю послідовність латок до одного файлу, а потім використати git am щоб застосувати їх усіх по одному.

Втім, якщо хтось відвантажив файл латки, який згенерував `format-patch`, до системи завдань (ticketing system) чи чогось подібтого, то файл можна зберегти локально та потім передати його з вашого диску до `git am` для застосування:

[source,console]
-----
$ git am 0001-limit-log-function.patch
Applying: add limit to log function
-----

Як ви можете бачити, команда чисто застосувала та автоматично створила новий коміт для вас.
Інформація про автора взята зі заголовків листа `From` та `Date`, а повідомлення коміту взято зі `Subject` та тіла (перед латкою) листа.
Наприклад, якби латка застосовувалась з наведеного вище прикладу mbox, згенерований коміт виглядав би приблизно так:

-----
$ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 10:17:23 2008 -0700
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 09:19:06 2009 -0700

   add limit to log function

   Limit log functionality to the first 20
-----

Інформація `Commit` містить людину, яка застосувала латку та час застосування.
Інформація `Author` -- особу, яка оригінально створила латку та коли це було зроблено.

Проте можливо, що латка не застосовується чисто.
Можливо, ваша головна гілка відхилилася надто далеко від гілки, на якій базувалася латка, або латка залежить від іншої латки, яку ви досі не застосували.
У цьому випадку, процес `git am` завершиться невдачею, та спитає вас, що робити:

[source,console]
-----
$ git am 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at 0001.
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".
-----

Ця команда додає позначки конфліктів до всіх файлів, з якими в неї є проблеми -- так само, як при конфліктах злиття чи перебазування.
Ви розв’язуєте ці проблеми так само – редагуєте файл, щоб розв’язати конфлікт, індексуєте оновлений файл, а потім  виконуєте `git am --resolved`, щоб продовжити з наступною латкою:

[source,console]
-----
$ (fix the file)
$ git add ticgit.gemspec
$ git am --resolved
Applying: seeing if this helps the gem
-----

Якщо ви бажаєте, щоб Git спробував поводитись трохи розумніше при розв’язуванні конфлікту, то можете передати опцію `-3`, з якою Git спробує три-точкове злиття (three-way merge).
Ця опція типово не ввімкнена, адже вона не працює, якщо коміту, на якому базується латка, немає у вашому репозиторії.
Якщо ви маєте цей коміт – якщо латка базувалася на публічному коміті – то зазвичай опція `-3` набагато кмітливіше застосовує конфліктну латку.

[source,console]
-----
$ git am -3 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied.
-----

У даному випадку, ця латка вже була застосована.
Без опції `-3` це схоже на конфлікт.

Якщо ви застосовуєте декілька латок з mbox, ви також можете виконати команду `am` в інтерактивному режимі, який зупиняється після кожної знайденої латки та питає, чи варто її застосовувати:

[source,console]
-----
$ git am -3 -i mbox
Commit Body is:
--------------------------
seeing if this helps the gem
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all
-----

Це зручно, якщо у вас збережено чисельні латки, адже ви можете спочатку переглянути латку, якщо не пам’ятаєте про що вона, або не застосовувати вже застосовані латки.

Коли всі латки для вашої гілки застосовані та збережені в комітах гілки, ви можете вибрати, як інтегрувати їх до довгостроковіших гілок.

[[_checking_out_remotes]]
==== Отримання віддалених гілок

(((branches, remote)))
Якщо внесок прийшов від користувача Git, який налаштував свій власний репозиторій, надіслав до нього декілька змін, та відправив вам URL цього сховища, а також ім’я віддаленої гілки, яка містить зміни, то можете додати його як віддалене сховище та зробити локальне злиття.

Наприклад, якщо Джесіка надсилає вам листа, в якому розповідає про чудовий новий функціонал у гілці `ruby-client` її сховища, то ви можете подивитись на них, якщо додасте віддалене сховище та отримаєте цю гілку локально:

[source,console]
-----
$ git remote add jessica git://github.com/jessica/myproject.git
$ git fetch jessica
$ git checkout -b rubyclient jessica/ruby-client
-----

Якщо пізніше вона знову надішле вам листа з іншою гілкою з ще однією чудовою функцією, то ви зможете отримати зміни, адже у вас вже є її віддалене сховище.

Це найкорисніше, якщо ви працюєте з кимось постійно.
Якщо хтось має лише єдину латку для внеску подеколи, то на прийняття її листом може піти менше часу, ніж вимагати від когось мати власний сервер та постійно додавати та вилучати віддалені сховища задля отримання нових латок.
Також навряд чи вам сподобається мати сотні віддалених репозиторіїв, у кожен з яких було додано лише одну чи дві латки.
Втім, скрипти та сервіси розгортання (hosted services)) можуть полегшити це – переважно все залежить від того, як працюєте ви, та як працюють автори внесків.

Інша перевага цього підходу в тому, що ви також отримуєте історію комітів.
Хоча у вас можуть бути справжні проблеми злиття, ви будете знати на чому з вашої історії вони основані; належне три-точкове злиття є типовим -- немає необхідності додавати `-3` та сподіватись, що латку було згенеровано на базі публічного коміту, до якого ви маєте доступ.

Якщо ви не співпрацюєте з людиною постійно, проте все одно бажаєте отримати зміни в такий спосіб, то можете надати URL віддаленого сховища команді `git pull`.
Це робить одноразове отримання змін та не зберігає URL як посилання на віддалений репозиторій:

[source,console]
-----
$ git pull https://github.com/onetimeguy/project
From https://github.com/onetimeguy/project
 * branch            HEAD       -> FETCH_HEAD
Merge made by recursive.
-----

[[_what_is_introduced]]
==== Як дізнатися, що додано

(((branches, diffing)))
Тепер у вас є тематична гілка, яка містить внесену працю.
Тепер ви можете визначити, що ви бажаєте з нею робити.
Ця секція розглядає наново декілька команд, щоб ви могли бачити, як їх можна використовувати для перегляду саме того, що буде додано в разі зливання до головної гілки.

Часто допомагає переглянути всі коміти, які є в поточній гілці, проте яких немає в гілці master.
Коміти з головної гілки можна виключити за допомогою опції `--not` перед ім’ям гілки.
Це робить те саме, що й формат `master..contrib`, що ми його використовували раніше.
Наприклад, якщо вам надіслано дві латки та ви створили гілку під назвою `contrib` та застосували їх до неї, то можете виконати:

[source,console]
-----
$ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 09:53:59 2008 -0700

    seeing if this helps the gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 19:38:36 2008 -0700

    updated the gemspec to hopefully work better
-----

To see what changes each commit introduces, remember that you can pass the `-p` option to `git log` and it will append the diff introduced to each commit.

To see a full diff of what would happen if you were to merge this topic branch with another branch, you may have to use a weird trick to get the correct results.
You may think to run this:

[source,console]
-----
$ git diff master
-----

This command gives you a diff, but it may be misleading.
If your `master` branch has moved forward since you created the topic branch from it, then you'll get seemingly strange results.
This happens because Git directly compares the snapshots of the last commit of the topic branch you're on and the snapshot of the last commit on the `master` branch.
For example, if you've added a line in a file on the `master` branch, a direct comparison of the snapshots will look like the topic branch is going to remove that line.

If `master` is a direct ancestor of your topic branch, this isn't a problem; but if the two histories have diverged, the diff will look like you're adding all the new stuff in your topic branch and removing everything unique to the `master` branch.

What you really want to see are the changes added to the topic branch – the work you'll introduce if you merge this branch with master.
You do that by having Git compare the last commit on your topic branch with the first common ancestor it has with the master branch.

Technically, you can do that by explicitly figuring out the common ancestor and then running your diff on it:

[source,console]
-----
$ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db
-----

However, that isn't convenient, so Git provides another shorthand for doing the same thing: the triple-dot syntax.
In the context of the `diff` command, you can put three periods after another branch to do a `diff` between the last commit of the branch you're on and its common ancestor with another branch:

[source,console]
-----
$ git diff master...contrib
-----

This command shows you only the work your current topic branch has introduced since its common ancestor with master.
That is a very useful syntax to remember.

==== Integrating Contributed Work

(((integrating work)))
When all the work in your topic branch is ready to be integrated into a more mainline branch, the question is how to do it.
Furthermore, what overall workflow do you want to use to maintain your project?
You have a number of choices, so we'll cover a few of them.

===== Merging Workflows

(((workflows, merging)))
One simple workflow merges your work into your `master` branch.
In this scenario, you have a `master` branch that contains basically stable code.
When you have work in a topic branch that you've done or that someone has contributed and you've verified, you merge it into your master branch, delete the topic branch, and then continue the process.
If we have a repository with work in two branches named `ruby_client` and `php_client` that looks like <<merwf_a>> and merge `ruby_client` first and then `php_client` next, then your history will end up looking like <<merwf_b>>.

[[merwf_a]]
.History with several topic branches.
image::images/merging-workflows-1.png[History with several topic branches.]

[[merwf_b]]
.After a topic branch merge.
image::images/merging-workflows-2.png[After a topic branch merge.]

That is probably the simplest workflow, but it can possibly be problematic if you're dealing with larger or more stable projects where you want to be really careful about what you introduce.

If you have a more important project, you might want to use a two-phase merge cycle.
In this scenario, you have two long-running branches, `master` and `develop`, in which you determine that `master` is updated only when a very stable release is cut and all new code is integrated into the `develop` branch.
You regularly push both of these branches to the public repository.
Each time you have a new topic branch to merge in (<<merwf_c>>), you merge it into `develop` (<<merwf_d>>); then, when you tag a release, you fast-forward `master` to wherever the now-stable `develop` branch is (<<merwf_e>>).

[[merwf_c]]
.Before a topic branch merge.
image::images/merging-workflows-3.png[Before a topic branch merge.]

[[merwf_d]]
.After a topic branch merge.
image::images/merging-workflows-4.png[After a topic branch merge.]

[[merwf_e]]
.After a project release.
image::images/merging-workflows-5.png[After a topic branch release.]

This way, when people clone your project's repository, they can either check out master to build the latest stable version and keep up to date on that easily, or they can check out develop, which is the more cutting-edge stuff.
You can also continue this concept, having an integrate branch where all the work is merged together.
Then, when the codebase on that branch is stable and passes tests, you merge it into a develop branch; and when that has proven itself stable for a while, you fast-forward your master branch.

===== Large-Merging Workflows

(((workflows, "merging (large)")))
The Git project has four long-running branches: `master`, `next`, and `pu` (proposed updates) for new work, and `maint` for maintenance backports.
When new work is introduced by contributors, it's collected into topic branches in the maintainer's repository in a manner similar to what we've described (see <<merwf_f>>).
At this point, the topics are evaluated to determine whether they're safe and ready for consumption or whether they need more work.
If they're safe, they're merged into `next`, and that branch is pushed up so everyone can try the topics integrated together.

[[merwf_f]]
.Managing a complex series of parallel contributed topic branches.
image::images/large-merges-1.png[Managing a complex series of parallel contributed topic branches.]

If the topics still need work, they're merged into `pu` instead.
When it's determined that they're totally stable, the topics are re-merged into `master` and are then rebuilt from the topics that were in `next` but didn't yet graduate to `master`.
This means `master` almost always moves forward, `next` is rebased occasionally, and `pu` is rebased even more often:

.Merging contributed topic branches into long-term integration branches.
image::images/large-merges-2.png[Merging contributed topic branches into long-term integration branches.]

When a topic branch has finally been merged into `master`, it's removed from the repository.
The Git project also has a `maint` branch that is forked off from the last release to provide backported patches in case a maintenance release is required.
Thus, when you clone the Git repository, you have four branches that you can check out to evaluate the project in different stages of development, depending on how cutting edge you want to be or how you want to contribute; and the maintainer has a structured workflow to help them vet new contributions.

[[_rebase_cherry_pick]]
===== Rebasing and Cherry Picking Workflows

(((workflows, rebasing and cherry-picking)))
Other maintainers prefer to rebase or cherry-pick contributed work on top of their master branch, rather than merging it in, to keep a mostly linear history.
When you have work in a topic branch and have determined that you want to integrate it, you move to that branch and run the rebase command to rebuild the changes on top of your current master (or `develop`, and so on) branch.
If that works well, you can fast-forward your `master` branch, and you'll end up with a linear project history.

(((git commands, cherry-pick)))
The other way to move introduced work from one branch to another is to cherry-pick it.
A cherry-pick in Git is like a rebase for a single commit.
It takes the patch that was introduced in a commit and tries to reapply it on the branch you're currently on.
This is useful if you have a number of commits on a topic branch and you want to integrate only one of them, or if you only have one commit on a topic branch and you'd prefer to cherry-pick it rather than run rebase.
For example, suppose you have a project that looks like this:

.Example history before a cherry-pick.
image::images/rebasing-1.png[Example history before a cherry-pick.]

If you want to pull commit `e43a6` into your master branch, you can run

[source,console]
-----
$ git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf
Finished one cherry-pick.
[master]: created a0a41a9: "More friendly message when locking the index fails."
 3 files changed, 17 insertions(+), 3 deletions(-)
-----

This pulls the same change introduced in `e43a6`, but you get a new commit SHA-1 value, because the date applied is different.
Now your history looks like this:

.History after cherry-picking a commit on a topic branch.
image::images/rebasing-2.png[History after cherry-picking a commit on a topic branch.]

Now you can remove your topic branch and drop the commits you didn't want to pull in.

===== Rerere

(((git commands, rerere)))(((rerere)))
If you're doing lots of merging and rebasing, or you're maintaining a long-lived topic branch, Git has a feature called ``rerere'' that can help.

Rerere stands for ``reuse recorded resolution'' – it's a way of shortcutting manual conflict resolution.
When rerere is enabled, Git will keep a set of pre- and post-images from successful merges, and if it notices that there's a conflict that looks exactly like one you've already fixed, it'll just use the fix from last time, without bothering you with it.

This feature comes in two parts: a configuration setting and a command.
The configuration setting is `rerere.enabled`, and it's handy enough to put in your global config:

[source,console]
----
$ git config --global rerere.enabled true
----

Now, whenever you do a merge that resolves conflicts, the resolution will be recorded in the cache in case you need it in the future.

If you need to, you can interact with the rerere cache using the `git rerere` command.
When it's invoked alone, Git checks its database of resolutions and tries to find a match with any current merge conflicts and resolve them (although this is done automatically if `rerere.enabled` is set to `true`).
There are also subcommands to see what will be recorded, to erase specific resolution from the cache, and to clear the entire cache. We will cover rerere in more detail in <<_rerere>>.

[[_tagging_releases]]
==== Tagging Your Releases

(((tags)))(((tags, signing)))
When you've decided to cut a release, you'll probably want to drop a tag so you can re-create that release at any point going forward.
You can create a new tag as discussed in <<_git_basics_chapter>>.
If you decide to sign the tag as the maintainer, the tagging may look something like this:

[source,console]
-----
$ git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: "Scott Chacon <schacon@gmail.com>"
1024-bit DSA key, ID F721C45A, created 2009-02-09
-----

If you do sign your tags, you may have the problem of distributing the public PGP key used to sign your tags.
The maintainer of the Git project has solved this issue by including their public key as a blob in the repository and then adding a tag that points directly to that content.
To do this, you can figure out which key you want by running `gpg --list-keys`:

[source,console]
-----
$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]
-----

Then, you can directly import the key into the Git database by exporting it and piping that through `git hash-object`, which writes a new blob with those contents into Git and gives you back the SHA-1 of the blob:

[source,console]
-----
$ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92
-----

Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the new SHA-1 value that the `hash-object` command gave you:

[source,console]
-----
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92
-----

If you run `git push --tags`, the `maintainer-pgp-pub` tag will be shared with everyone.
If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG:

[source,console]
-----
$ git show maintainer-pgp-pub | gpg --import
-----

They can use that key to verify all your signed tags.
Also, if you include instructions in the tag message, running `git show <tag>` will let you give the end user more specific instructions about tag verification.

[[_build_number]]
==== Generating a Build Number

(((build numbers)))(((git commands, describe)))
Because Git doesn't have monotonically increasing numbers like 'v123' or the equivalent to go with each commit, if you want to have a human-readable name to go with a commit, you can run `git describe` on that commit.
Git gives you the name of the nearest tag with the number of commits on top of that tag and a partial SHA-1 value of the commit you're describing:

[source,console]
-----
$ git describe master
v1.6.2-rc1-20-g8c5b85c
-----

This way, you can export a snapshot or build and name it something understandable to people.
In fact, if you build Git from source code cloned from the Git repository, `git --version` gives you something that looks like this.
If you're describing a commit that you have directly tagged, it gives you the tag name.

The `git describe` command favors annotated tags (tags created with the `-a` or `-s` flag), so release tags should be created this way if you're using `git describe`, to ensure the commit is named properly when described.
You can also use this string as the target of a checkout or show command, although it relies on the abbreviated SHA-1 value at the end, so it may not be valid forever.
For instance, the Linux kernel recently jumped from 8 to 10 characters to ensure SHA-1 object uniqueness, so older `git describe` output names were invalidated.

[[_preparing_release]]
==== Preparing a Release

(((releasing)))(((git commands, archive)))
Now you want to release a build.
One of the things you'll want to do is create an archive of the latest snapshot of your code for those poor souls who don't use Git.
The command to do this is `git archive`:

[source,console]
-----
$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz
$ ls *.tar.gz
v1.6.2-rc1-20-g8c5b85c.tar.gz
-----

If someone opens that tarball, they get the latest snapshot of your project under a project directory.
You can also create a zip archive in much the same way, but by passing the `--format=zip` option to `git archive`:

[source,console]
-----
$ git archive master --prefix='project/' --format=zip > `git describe master`.zip
-----

You now have a nice tarball and a zip archive of your project release that you can upload to your website or e-mail to people.

[[_the_shortlog]]
==== The Shortlog

(((git commands, shortlog)))
It's time to e-mail your mailing list of people who want to know what's happening in your project.
A nice way of quickly getting a sort of changelog of what has been added to your project since your last release or e-mail is to use the `git shortlog` command.
It summarizes all the commits in the range you give it; for example, the following gives you a summary of all the commits since your last release, if your last release was named v1.0.1:

[source,console]
-----
$ git shortlog --no-merges master --not v1.0.1
Chris Wanstrath (8):
      Add support for annotated tags to Grit::Tag
      Add packed-refs annotated tag support.
      Add Grit::Commit#to_patch
      Update version and History.txt
      Remove stray `puts`
      Make ls_tree ignore nils

Tom Preston-Werner (4):
      fix dates in history
      dynamic version method
      Version bump to 1.0.2
      Regenerated gemspec for version 1.0.2
-----

You get a clean summary of all the commits since v1.0.1, grouped by author, that you can e-mail to your list.
