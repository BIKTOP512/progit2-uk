[[_git_aliases]]
//=== Git Aliases
=== Псевдоніми Git

(((aliases)))
//Before we finish this chapter on basic Git, there's just one little tip that can make your Git experience simpler, easier, and more familiar: aliases.
До того, як завершити розділ про базовий Git, є ще одна маленька підказка, щоб зробити ваше користування Git простішим, легшим та більш знайомим: псевдоніми.
//We won't refer to them or assume you've used them later in the book, but you should probably know how to use them.
Ми більше не будемо про них згадувати та будемо вважати, що ви використовуєте їх самостійно в решті книги, проте напевно вам слід знати, як їх використовувати.

//Git doesn't automatically infer your command if you type it in partially.
Git сам не намагається здогадатись, яку команду ви набрали, якщо ви набрали її частково.
//If you don't want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.(((git commands, config)))
Якщо ви не хочете набирати команди Git повністю, ви легко можете налаштувати псевдоніми для кожної команди за допомогою `git config`.(((git commands, config)))
//Here are a couple of examples you may want to set up:
Ось декілька прикладів як це можна зробити:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

//This means that, for example, instead of typing `git commit`, you just need to type `git ci`.
Це означає, що, наприклад, замість `git commit` ви можете набрати просто `git ci`.
//As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.
З часом, ви напевно почнете використовувати й інші команди часто. Не вагайтесь створювати нові псевдоніми.

//This technique can also be very useful in creating commands that you think should exist.
Ця техніка також може бути дуже корисною для створення нових команд, які ви гадаєте мають існувати.
//For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:
Наприклад, щоб виправити незручність, яку ми бачили при скасуванні змін до файлу, ви можете додати свою власну команду unstage (видалити з області додавання) до Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

//This makes the following two commands equivalent:
Після цього наступні команди еквівалентні:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

//This seems a bit clearer.
Це здається трохи яснішим.
//It's also common to add a `last` command, like this:
Також нерідко додають команду `last` (останній), ось так:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

//This way, you can see the last commit easily:
Тепер ви легко можете побачити останню фіксацію:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

//As you can tell, Git simply replaces the new command with whatever you alias it for.
Як ви напевно зрозуміли, Git просто підставляє замість псевдоніму його значення.
//However, maybe you want to run an external command, rather than a Git subcommand.
Проте, можливо ви бажаєте виконати зовнішню команду, а не команду Git.
//In that case, you start the command with a `!` character.
У цьому разі, треба почати команду зі знаку оклику `!`.
//This is useful if you write your own tools that work with a Git repository.
Це корисно, якщо ви бажаєте створити власні інструменти для роботи зі сховищем Git.
//We can demonstrate by aliasing `git visual` to run `gitk`:
Ми продемонструємо це, створивши псевдонім `git visual` для виконання `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
