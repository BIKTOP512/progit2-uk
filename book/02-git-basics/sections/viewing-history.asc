[[_viewing_history]]
//=== Viewing the Commit History
=== Перегляд історії комітів

//After you have created several commits, or if you have cloned a repository with an existing commit history, you'll probably want to look back to see what has happened.
Після того як ви створили декілька комітів, або якщо ви зробили клон репозиторію з існуючою історією комітів, ви напевно забажаєте дізнатись, що було відбувалося.
//The most basic and powerful tool to do this is the `git log` command.
Найбільш могутньою утилітою для цього є команда `git log`.

//These examples use a very simple project called ``simplegit''.
Ці приклади використовують дуже простий проект під назвою ``simplegit''.
//To get the project, run
Щоб отримати цей проект, виконайте

[source,console]
----
git clone https://github.com/schacon/simplegit-progit
----

//When you run `git log` in this project, you should get output that looks something like this:
Якщо ви виконаєте `git log` у цьому проекті, ви маєте побачити щось на кшталт:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

//By default, with no arguments, `git log` lists the commits made in that repository in reverse chronological order – that is, the most recent commits show up first.
Якщо не передати жодної опції до команди `git log`, вона виведе зроблені коміти репозиторію у зворотньому хронологічному порядку – тобто, найновіші коміти будуть показані першими.
//As you can see, this command lists each commit with its SHA-1 checksum, the author's name and e-mail, the date written, and the commit message.
Як бачите, ця команда показує для кожного коміту його SHA-1 хеш, ім’я та пошту автора, дату запису, та повідомлення коміту.

//A huge number and variety of options to the `git log` command are available to show you exactly what you're looking for.
Існує величезне різноманіття опцій до команди `git log` щоб відобразити саме те, що ви хочете.
//Here, we'll show you some of the most popular.
Тут ми продемонструємо вам найпоширеніші.

//One of the more helpful options is `-p`, which shows the difference introduced in each commit.
Одна з найкорисніших опцій це `-p`, котра показує різницю привнесену при кожному коміті.
//You can also use `-2`, which limits the output to only the last two entries:
Ви також можете використати `-2`, що обмежує кількість виводу тільки до двох останніх елементів:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

//This option displays the same information but with a diff directly following each entry.
Ця опція показує ту саму інформацію та ще зміни відразу після кожного елементу.
//This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.
Це дуже корисно для перегляду коду або швидкого перегляду що сталося протягом декількох комітів, що їх додав співробітник.
//You can also use a series of summarizing options with `git log`.
Ви можете також використати ряд підсумкових опцій з `git log`.
//For example, if you want to see some abbreviated stats for each commit, you can use the `--stat` option:
Наприклад, якщо ви бажаєте побачити дещо скорочену статистику для кожного коміту, ви можете скористатись опцією `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

//As you can see, the `--stat` option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.
Як бачите, опція `--stat` друкує під кожним комітом список змінених файлів, скільки файлів було змінено, скільки рядків у кожному файлі було додано та видалено.
//It also puts a summary of the information at the end.
Також видає підсумок інформації наприкінці.

//Another really useful option is `--pretty`.
Інша дійсно корисна опція це `--pretty`.
//This option changes the log output to formats other than the default.
Ця опція змінює вивід -- відображає його в іншому форматі.
//A few prebuilt options are available for you to use.
Вам доступні декілька вбудованих опцій формату.
//The `oneline` option prints each commit on a single line, which is useful if you're looking at a lot of commits.
Опція `oneline` друкує кожнен коміт в один рядок, що корисно, якщо ви дивитесь на багато комітів.
//In addition, the `short`, `full`, and `fuller` options show the output in roughly the same format but with less or more information, respectively:
На додаток, опції `short`, `full` та `fuller` показують вивід приблизно в такому ж форматі, але зменшують чи збільшують кількість інформації, відповідно:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

//The most interesting option is `format`, which allows you to specify your own log output format.
Найцікавіша опція це `format`, що дозволяє вам визначити свій власний формат виводу.
//This is especially useful when you're generating output for machine parsing – because you specify the format explicitly, you know it won't change with updates to Git:(((log formatting)))
Це особливо корисно, якщо ви генеруєте вивід для розбору програмою, адже ви можете явно вказати формат, та ви будете знати, що він не зміниться у наступних версіях Git:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

//<<pretty_format>> lists some of the more useful options that format takes.
<<pretty_format>> описує деякі найкорисніші опції формату.

[[pretty_format]]
//.Useful options for `git log --pretty=format`
//[cols="1,4",options="header"]
//|================================
//| Option   | Description of Output
//| `%H`     | Commit hash
//| `%h`     | Abbreviated commit hash
//| `%T`     | Tree hash
//| `%t`     | Abbreviated tree hash
//| `%P`     | Parent hashes
//| `%p`     | Abbreviated parent hashes
//| `%an`    | Author name
//| `%ae`    | Author e-mail
//| `%ad`    | Author date (format respects the --date=option)
//| `%ar`    | Author date, relative
//| `%cn`    | Committer name
//| `%ce`    | Committer email
//| `%cd`    | Committer date
//| `%cr`    | Committer date, relative
//| `%s`     | Subject
//|================================
.Корисні опції для `git log --pretty=format`
|================================
| Опція    | Опис Виводу
| `%H`     | Хеш коміту
| `%h`     | Скорочений хеш коміту
| `%T`     | Хеш дерева
| `%t`     | Скорочений хеш дерева
| `%P`     | Хеши батьків
| `%p`     | Скорочені хеши батьків
| `%an`    | Ім’я автора
| `%ae`    | Поштова адреса автора
| `%ad`    | Дата автора (формат враховує опцію --date=option)
| `%ar`    | Відносна дата автора
| `%cn`    | Ім’я користувача, що зробив коміт (далі фіксатор)
| `%ce`    | Поштова адреса фіксатора
| `%cd`    | Дата фіксатора
| `%cr`    | Відносна дата фіксатора
| `%s`     | Тема
|================================

//You may be wondering what the difference is between _author_ and _committer_.
Вам може стати цікаво в чому різниця між _автором_ та _фіксатором_.
//The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.
Автор це людина, що спочатку зробила роботу, тоді як фіксатор – це людина, яка востаннє застосувала роботу.
//So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit – you as the author, and the core member as the committer.
Отже, якщо ви відправили патч до проекту та один з програмістів ядра застосує вашу латку, ви обидва будете згадані – ви як автор, а програміст ядра як фіксатор.
//We'll cover this distinction a bit more in <<_distributed_git>>.
Ми більше про це поговоримо у <<_distributed_git>>.

//The oneline and format options are particularly useful with another `log` option called `--graph`.
Опції oneline та format особливо корисні з іншою опцією `log`, що називається `--graph`.
//This option adds a nice little ASCII graph showing your branch and merge history:
Ця опція додає маленький гарний ASCII граф, що показує історію ваших гілок та зливань:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

//This type of output will become more interesting as we go through branching and merging in the next chapter.
Цей тип виводу стане цікавішим, коли ми будемо розповідати про гілки та злиття у наступному розділі.

//Those are only some simple output-formatting options to `git log` – there are many more.
Це тільки декілька простих опцій формату виводу `git log` – їх набагато більше.
//<<log_options>> lists the options we've covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the log command.
<<log_options>> наводить опції, про які ми вже розповідали, та деякі інші розповсюджені опції формату, що можуть бути корисними, з поясненням того, як вони змінюють вивід команди log.

[[log_options]]
//.Common options to `git log`
//[cols="1,4",options="header"]
//|================================
//| Option            | Description
//| `-p`              | Show the patch introduced with each commit.
//| `--stat`          | Show statistics for files modified in each commit.
//| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
//| `--name-only`     | Show the list of files modified after the commit information.
//| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
//| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
//| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
//| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
//| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
//|================================
.Розповсюджені опції `git log`
[cols="1,4",options="header"]
|================================
| Опція             | Опис
| `-p`              | Показує зміни файлів кожного коміту
| `--stat`          | Показує статистику змінених файлів для кожного коміту.
| `--shortstat`     | Відображає тільки рядок зміни/вставки/видалення з опції --stat.
| `--name-only`     | Показує список змінених файлів після інформації про коміт.
| `--name-status`   | Показує список змінених файлів з інформацією додано/змінено/видалено.
| `--abbrev-commit` | Показує тільки перші декілька символів SHA-1 суми замість усіх 40.
| `--relative-date` | Відображає дату у відносному форматі (наприклад, ``2 тижня тому'') замість використання повного формату дати.
| `--graph`         | Відображає ASCII граф історії гілок та зливань поряд зі звичайним виводом.
| `--pretty`        | Показує коміти в альтернативному форматі. Можливі значення: online, short, full, fuller та format (якому задаєте свій власний формат).
|================================

//==== Limiting Log Output
==== Обмеження виводу журналу

//In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
На додаток до опцій, що контролюють формат виводу, `git log` також приймає декілька корисний обмежувальних опцій – тобто, опцій, що дозволяють вам показувати тільки підмножину комітів.
//You've seen one such option already – the `-2` option, which show only the last two commits.
Ви вже бачили одну таку опцію: `-2`, що показує тільки останні два коміти.
//In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
Насправді, ви можете використати `-<n>`, де `n` це будь-яке ціле число, щоб показати останні `n` комітів.
//In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.
Однак навряд чи ви будете використовувати це часто, адже Git зазвичай передає весь свій вивід переглядачу, отже ви бачите тільки одну сторінку журналу за раз.

//However, the time-limiting options such as `--since` and `--until` are very useful.
Втім, опції обмеження по часу, такі як `--since` (від) та `--until` (до) дуже корисні.
//For example, this command gets the list of commits made in the last two weeks:
Наприклад, ця команда отримає список комітів за останні два тижні:

[source,console]
----
$ git log --since=2.weeks
----

//This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.
Ця команда працює з різноманітними форматами – ви можете задати точну дату, наприклад `"1991-08-24"`, чи відносну дату, наприклад `"2 years 1 day 3 minutes ago"`.

//You can also filter the list to commits that match some search criteria.
Ви також можете відсіювати список комітів, що відповідають якомусь критерію пошуку.
//The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
Опція `--author` дозволяє вам відбирати по заданому автору, а опція `--grep` дозволяє вам шукати ключові слова в повідомленнях комітів.
//(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)
(Зауважте, що якщо ви бажаєте відсіяти і по автору, і по змісту, вам необхідно додати опції `--all-match`, інакше команда видасть коміти, що задовольняють хоча б один з критеріїв)

//Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.
Іншf дійсно корисна опція `-S` приймає рядок та відображає тільки коміти, що в зміні змісту додали або видалили цей рядок.
//For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:
Наприклад, якщо ви бажаєте знайти останній коміт, що додав чи видалив посилання на певну функцію, вам варто викликати:

[source,console]
----
$ git log -Sfunction_name
----

//The last really useful option to pass to `git log` as a filter is a path.
Остання дійсно корисна опція, яку можна передати до `git log` -- це шлях.
//If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
Якщо ви зазначите директорію або ім’я файлу, ви можете обмежити вивід до комітів, що змінювали ці файли.
//This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.
Це завжди остання опція та зазвичай перед нею ставлять подвійний дефіс (`--`) щоб відділити шляхи від опцій.

//In <<limit_options>> we'll list these and a few other common options for your reference.
У <<limit_options>> ми перелічили ці та ще декілька інших розповсюджених опцій для довідки.

[[limit_options]]
//.Options to limit the output of `git log`
//[cols="2,4",options="header"]
//|================================
//| Option                | Description
//| `-(n)`                | Show only the last n commits
//| `--since`, `--after`  | Limit the commits to those made after the specified date.
//| `--until`, `--before` | Limit the commits to those made before the specified date.
//| `--author`            | Only show commits in which the author entry matches the specified string.
//| `--committer`         | Only show commits in which the committer entry matches the specified string.
//| `--grep`              | Only show commits with a commit message containing the string
//| `-S`                  | Only show commits adding or removing code matching the string
//|================================
.Опції для обмеження виводу `git log`
[cols="2,4",options="header"]
|================================
| Опція                 | Опис
| `-(n)`                | Показати тільки останні n комітів
| `--since`, `--after`  | Обмежитись комітами, що були створені після переданої дати.
| `--until`, `--before` | Обмежитись комітами, що були створені до переданої дати.
| `--author`            | Показати тільки ті коміти, автор яких збігається із переданим.
| `--committer`         | Показати тільки ті коміти, фіксатор яких збігається із переданим
| `--grep`              | Показати тільки ті коміти, повідомлення яких містить рядок.
| `-S`                  | Показати тільки ті коміти, в яких додали або видалили рядок, що містить переданий рядок.
|================================

//For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano and were not merges in the month of October 2008, you can run something like this:(((log filtering)))
Наприклад, якщо ви бажаєте побачити, в яких комітах були змінені тестові файли в коді Git, що були p,tht;tys Junio Hamano та не були злиттям у жовтні 2008 року, ви можете виконати таку команду:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

//Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
З приблизно 40000 комітів в історії коду Git, ця команда відображає тільки 6, що задовольняють цим критеріям.
