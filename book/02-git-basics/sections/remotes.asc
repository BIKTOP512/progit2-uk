[[_remote_repos]]
//=== Working with Remotes
=== Взаємодія з Віддаленими Сховищами

//To be able to collaborate on any Git project, you need to know how to manage your remote repositories.
Задля співпраці з будь-яким проектом Git, вам необхідно знати, як керувати віддаленими сховищами.
//Remote repositories are versions of your project that are hosted on the Internet or network somewhere.
Віддалені сховища – це версії вашого проекту, що розташовані в Інтернеті, або десь у мережі.
//You can have several of them, each of which generally is either read-only or read/write for you.
Їх може бути декілька, кожне зазвичай або тільки для читання, або для читання та змін.
//Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.
Співпраця з іншими вимагає керування цими віддаленими сховищами, викладання (`pushing`) та забирання (`pulling`) даних до ти з них, коли ви хочете зробити внесок.
//Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.
Керування віддаленими сховищами потребує знань про додавання віддалених сховищ, видалення сховищ, що більше не потрібні, керування різноманітними віддаленими гілками та визначення слідкування за ними, і багато іншого.
//In this section, we'll cover some of these remote-management skills.
У цій секції, ми пройдемо ці вміння керування віддаленими сховищами.

//==== Showing Your Remotes
==== Дивимось на Ваші Сховища

//To see which remote servers you have configured, you can run the `git remote` command.(((git commands, remote)))
Щоб побачити, які віддалені сервера ви налаштували, ви можете виконати команду `git remote`.(((git commands, remote)))
//It lists the shortnames of each remote handle you've specified.
Вона виводить список коротких імен кожного віддаленого сховища, яке ви задали.
//If you've cloned your repository, you should at least see origin – that is the default name Git gives to the server you cloned from:
Якщо ви отримали своє сховище клонуванням, ви маєте побачити хоча б `origin` – таке ім’я Git дає серверу, з якого ви зробили клон:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

You can also specify `-v`, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
Ви також можете дати опцію `-v`, яка покаже вам посилання, які Git зберігає та використовує при читанні та записі до цього сховища:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

//If you have more than one remote, the command lists them all.
Якщо у вас більше ніж одне віддалене сховище, ця команда описує їх усі.
//For example, a repository with multiple remotes for working with several collaborators might look something like this.
Наприклад, сховище з декількома віддаленими сховищами для роботи з багатьма співробітниками може виглядати так.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

//This means we can pull contributions from any of these users pretty easily. We may additionally have permission to push to one or more of these, though we can't tell that here.
Це означає, що ми можемо забрати (`pull`) внески з будь-якого з цих користувачів доволі легко. Ми також можемо мати дозвіл на пхання до якихось з них, хоч ми й не можемо цього тут визначити.

//Notice that these remotes use a variety of protocols; we'll cover more about this in <<_git_on_the_server>>.
Завважте, що ці сховища використовують різноманітні протоколи. Ми більше про це поговоримо в <<_git_on_the_server>>.

//==== Adding Remote Repositories
==== Додавання Віддалених Сховищ

//We've mentioned and given some demonstrations of adding remote repositories in previous sections, but here is how to do it explicitly.(((git commands, remote)))
Ми згадували і навіть продемонстрували додавання віддаленого сховища у попередній секції, проте ось так ми можемо зробити це явно.(((git commands, remote)))
//To add a new remote Git repository as a shortname you can reference easily, run `git remote add [shortname] [url]`:
Щоб додати нове віддалене Гіт сховище під заданим ім’ям, на яке ви можете легко посилатись, виконайте `git remote add [ім’я] [посилання]`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

//Now you can use the string `pb` on the command line in lieu of the whole URL.
Тепер ви можете використати рядок `pb` в командному рядку замість повного посилання.
//For example, if you want to fetch all the information that Paul has but that you don't yet have in your repository, you can run `git fetch pb`:
Наприклад, якщо ви хочете дістати (`fetch`) усю інформацію, яке є у Пола, проте її нема у вашому сховище, ви можете виконати `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

//Paul's master branch is now accessible locally as `pb/master` – you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.
Гілка `master` Пола тепер доступна локально як `pb/master` – ви можете злити її з однією з ваших гілок, або зробити з неї локальну гілку, якщо хочете оглянути її.
//(We'll go over what branches are and how to use them in much more detail in <<_git_branching>>.)
(Ми розповімо що таке гілки та як ними користуватися набагато докладніше в <<_git_branching>>.)

[[_fetching_and_pulling]]
//==== Fetching and Pulling from Your Remotes
==== Діставання (`Fetching`) та Забирання (`Pulling`) з Ваших Віддалених Сховищ

//As you just saw, to get data from your remote projects, you can run:(((git commands, fetch)))
Як ви щойно побачили, щоб отримати дані з ваших віддалених проектів, ви можете виконати:(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

//The command goes out to that remote project and pulls down all the data from that remote project that you don't have yet.
Ця команда заходить на віддалений проект та забирає звідти усі дані, котрих у вас досі нема.
//After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.
Після цього, у вас будуть посилання на усі гілки з того сховища, які ви можете зливати або оглядати в будь-який час.

//If you clone a repository, the command automatically adds that remote repository under the name ``origin''.
Якщо ви зробили клон сховища, команда автоматично додає це віддалене сховище під ім’ям ``origin''.
//So, `git fetch origin` fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
Отже, `git fetch origin` дістає будь-яку нову працю, що її виклали на той сервер після того, як ви зробили його клон (або востаннє діставали з нього).
//It's important to note that the `git fetch` command pulls the data to your local repository – it doesn't automatically merge it with any of your work or modify what you're currently working on.
Важливо зауважити, що команда `git fetch` отримує дані до вашого локального сховища – вона автоматично не зливає їх з вашою роботою, та не змінює вашу поточну працю.
//You have to merge it manually into your work when you're ready.
Вам буде потрібно вручну її злити, коли ви будете готові.

//If you have a branch set up to track a remote branch (see the next section and <<_git_branching>> for more information), you can use the `git pull` command to automatically fetch and then merge a remote branch into your current branch.(((git commands, pull)))
Якщо ваша гілка налаштована слідкувати за віддаленою гілкою (докладніше у наступній секції та <<_git_branching>>), ви можете виконати команду `git pull` щоб автоматично дістати та злити віддалену гілку до вашої поточної гілки.(((git commands, pull)))
//This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.
Це може бути легшим та зручнішим методом для вас. Та команда `git clone` автоматично налаштовує вашу локальну гілку master слідкувати за віддаленою гілкою master (хоча вона може називатись і по іншому) на віддаленому сервері, з якого ви зробили клон.
//Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.
Виконання `git pull` зазвичай дістає дані з серверу, з якого ви зробили клон, та намагається злити її з кодом, над яким ви зараз працюєте.

[[_pushing_remotes]]
//==== Pushing to Your Remotes
==== Пхання до Ваших Віддалених Сховищ

//When you have your project at a point that you want to share, you have to push it upstream.
Коли ви довели свій проект до стану, коли хочете їм поділитись, вам треба викласти (`push`) його нагору (`upstream`).
//The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
Це робиться простою командою: `git push [ім’я сховища] [ім’я гілки]`.(((git commands, push)))
//If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:
Якщо ви бажаєте викласти свою гілку master до вашого серверу `origin` (клонування зазвичай налаштовує обидва імені для вас автоматично), ви можете виконати наступне для пхання усіх зроблених фіксацій до серверу:

[source,console]
----
$ git push origin master
----

//This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
Ця команда спрацює тільки в разі, якщо ви зробили клон з серверу, до якого у вас є доступ на запис, та ніхто не пхав до нього після цього.
//If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
Якщо хтось інший зробив клон та запхав назад до вас, вашій спробі буде слушно відмовлено.
//You'll have to pull down their work first and incorporate it into yours before you'll be allowed to push.
Вам доведеться спершу забрати їх працю та вбудувати її до вашої до того, як вам дозволять викласти.
//See <<_git_branching>> for more detailed information on how to push to remote servers.
Докладніше про пхання до віддалених серверів у <<_git_branching>>.

[[_inspecting_remote]]
//==== Inspecting a Remote
==== Оглядання Віддаленого Сховища

//If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.(((git commands, remote)))
Якщо ви бажаєте більше дізнатись про окреме віддалене сховище, ви можете використати команду `git remote show [ім’я сховища]`.(((git commands, remote)))
//If you run this command with a particular shortname, such as `origin`, you get something like this:
Якщо ви виконаєте цю команду з окремим ім’ям, наприклад `origin`, ви отримаєте щось на кшталт:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

//It lists the URL for the remote repository as well as the tracking branch information.
Вона виводить посилання для віддаленого сховища, а також інформацію про слідкування за гілками.
//The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.
Команда ґречно розповідає вам, що якщо ви на гілці master та виконаєте команду `git pull`, вона автоматично зіллє гілку master з віддаленою після того, як дістане всі дані з віддаленого сховища.
//It also lists all the remote references it has pulled down.
Також видано список усіх віддалених посилань, які були забрані.

//That is a simple example you're likely to encounter.
Ви напевно зустрінете такий простий приклад.
//When you're using Git more heavily, however, you may see much more information from `git remote show`:
Втім, коли ви почнете працювати з Git інтенсивніше, ви можете побачити набагато більше інформації від `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

//This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
Ця команда показує, до яких гілок автоматично пхаються ваші зміни, коли ви виконуєте `git push`, доки перебуваєте на певної гілці.
//It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run `git pull`.
Вона також показує, які віддалених гілок з серверу у вас нема, які віддалені гілки, що у вас є, були видалені з серверу, та декілька гілок, що автоматично зливаються, коли ви виконуєте `git pull`.

//==== Removing and Renaming Remotes
==== Видалення та Перейменування Віддалених Сховищ

//If you want to rename a reference you can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
Якщо ви бажаєте перейменувати віддалене сховище, ви можете виконати `git remote rename`.(((git commands, remote)))
//For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:
Наприклад, щоб перейменувати `pb` на `paul`, ви можете виконати `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

//It's worth mentioning that this changes your remote branch names, too.
Варто зазначити, що це змінює і назви ваших віддалених гілок.
//What used to be referenced at `pb/master` is now at `paul/master`.
Що раніше мало назву `pb/master`, тепер називається `paul/master`.

//If you want to remove a remote for some reason – you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore – you can use `git remote rm`:
Якщо ви з якоїсь причини бажаєте видалити віддалене сховище – ви перемістили сервер або більше не використовуєте якесь дзеркало, або можливо хтось припинив співпрацю – ви можете використати `git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
