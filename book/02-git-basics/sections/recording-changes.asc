//=== Recording Changes to the Repository
=== Запис Змін до Репозиторію

//You have a bona fide Git repository and a checkout or working copy of the files for that project.
У вас є справжній Git репозиторій та робоча тека з файлами цього проекту
//You need to make some changes and commit snapshots of those changes into your repository each time the project reaches a state you want to record.
Вам треба зробити деякі зміни та зафіксувати їх у вашому репозиторії кожного разу, коли ваш проект набуває стану, що ви бажаєте зберегти.

//Remember that each file in your working directory can be in one of two states: tracked or untracked.
Пам’ятайте, що кожен файл вашої робочої теки може бути в одному з двох станів: контрольований (tracked) чи неконтрольований (untracked).
//Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
Контрольовані файли – це файли, що були в останньому знімку. Вони можуть бути не зміненими, зміненими або доданими.
//Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.
Неконтрольовані файли це все інше – будь-які файли у вашій робочій теці, що не були у вашому останньому знімку та не існують у вашій області додавання.
//When you first clone a repository, all of your files will be tracked and unmodified because you just checked them out and haven't edited anything.
Якщо ви щойно зробили клон репозиторію, усі ваші файли контрольовані та не змінені, адже ви щойно їх отримали та не редагували нічого.

//As you edit files, Git sees them as modified, because you've changed them since your last commit.
По мірі редагування файлів, Git бачить, що вони змінені, адже ви їх змінили після останньої фіксації.
//You stage these modified files and then commit all your staged changes, and the cycle repeats.
Ви додаєте ці змінені фали та потім фіксуєте всі додані зміни, та цей цикл повторюється.

.The lifecycle of the status of your files.
//image::images/lifecycle.png[The lifecycle of the status of your files.]
image::images/lifecycle.png[Цикл життя статусу ваших файлів.]

[[_checking_status]]
//==== Checking the Status of Your Files
==== Перевірка Статусу Ваших Файлів

//The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
Щоб дізнатись, в якому стані ваші файли, варто скористатись командою `git status`.(((git commands, status)))
//If you run this command directly after a clone, you should see something like this:
Якщо ви виконаєте цю команду відразу після клонування, ви маєте побачити таке:

[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----

//This means you have a clean working directory – in other words, there are no tracked and modified files.
Це означає, що ваша робоча тека чиста – іншими словами, у вас нема контрольованих та змінених файлів.
//Git also doesn't see any untracked files, or they would be listed here.
Git також не бачить неконтрольованих файлів, інакше він би їх тут вказав.
//Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.
Нарешті, ця команда показує вам, в якій ви зараз гілці та інформує вас про те, що вона не розбіглася з такою ж гілкою на сервері.
//For now, that branch is always ``master'', which is the default; you won't worry about it here.
Поки що, ця гілка завжди буде ``master'', така гілка створюється автоматично. Це нас не обходить у цьому розділі.
//<<_git_branching>>  will go over branches and references in detail.
<<_git_branching>> розповідає про гілки та посилання докладно.

//Let's say you add a new file to your project, a simple README file.
Припустимо ви додали новий файл до вашого проекту, простий файл README.
//If the file didn't exist before, and you run `git status`, you see your untracked file like so:
Якщо файл раніше не існував, і ви виконаєте `git status`, ви побачите ваш неконтрольований файл так:

[source,console]
----
$ echo 'Мій проект' > README
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

//You can see that your new README file is untracked, because it's under the ``Untracked files'' heading in your status output.
Ви можете бачити, що ваш новий README файл неконтрольований, адже він під заголовком ``Untracked files'' у статусі.
//Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit); Git won't start including it in your commit snapshots until you explicitly tell it to do so.
Неконтрольований (untracked) означає, що Git бачить файл, якого нема у попередньому знімку (фіксації, commit). Git не почне включати його до ваших фіксованих знімків доки ви явно не скажете йому це зробити.
//It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.
Так зроблено щоб ви випадково не почали включати генеровані бінарні файли чи інші файли, які ви не збирались включати.
//You do want to start including README, so let's start tracking the file.
Ви все ж таки хочете почати включати README, отже давайте почнемо контролювати файл.

[[_tracking_files]]
//==== Tracking New Files
==== Контролювання Нових Файлів

//In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
Щоб почати контролювати новий файл, вам треба використати команду `git add`.(((git commands, add)))
//To begin tracking the README file, you can run this:
Почати контролювати файл README можна так:

[source,console]
----
$ git add README
----

//If you run your status command again, you can see that your README file is now tracked and staged to be committed:
Якщо ви знову виконаєте команду status, ви побачите, що ваш файл README тепер контролюється та готовий до фіксації:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

//You can tell that it's staged because it's under the ``Changes to be committed'' heading.
Ви можете зрозуміти, що цей файл доданий, бо він під заголовком ``Changes to be committed''.
//If you commit at this point, the version of the file at the time you ran `git add` is what will be in the historical snapshot.
Якщо ви зафіксуєте зміни зараз, версія файлу на момент коли ви виконали `git add` буде збережена в знімку в історії.
//You may recall that when you ran `git init` earlier, you then ran `git add (files)` – that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
Ви можете пригадати, що коли ви виконали `git init` раніше, ви потім виконали `git add (файли)` – це було зроблено щоб розпочати контролювати файли у вашій теці.(((git commands, init)))(((git commands, add)))
//The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.
Команда `git add` приймає шлях файлу або теки. Якщо це тека, команда додає усі вайли в цій теці рекурсивно.

//==== Staging Modified Files
==== Додавання Змінених Файлів

//Let's change a file that was already tracked.
Давайте змінимо файл, що вже контролюється.
//If you change a previously tracked file called ``CONTRIBUTING.md'' and then run your `git status` command again, you get something that looks like this:
Якщо ви зміните файл ``CONTRIBUTING.md'', що вже контролюється, та потім виконаєте команду `git status` знову, ви отримаєте щось на кшталт:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

//The ``CONTRIBUTING.md'' file appears under a section named ``Changed but not staged for commit'' – which means that a file that is tracked has been modified in the working directory but not yet staged.
Файл ``CONTRIBUTING.md'' з’явився під секцією названою ``Changed but not staged for commit'' – це означає, що контрольований файл був редагований у робочій теці проте його не додали.
//To stage it, you run the `git add` command. `git add` is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved. It may be helpful to think of it more as ``add this content to the next commit'' rather than ``add this file to the project''.(((git commands, add)))
Щоб додати його, виконайте команду `git add`. `git add` багатоцільова команда – її слід використовувати щоб почати контролювати нові файли, щоб додавати файли, та для інших речей, наприклад позначання конфліктних файлів як розв’язаних.  Про неї краще думати ``Додай цей зміст до наступної фіксації'' а не ``додай цей файл до проекту''.(((git commands, add)))
//Let's run `git add` now to stage the ``CONTRIBUTING.md'' file, and then run `git status` again:
Давайте виконаємо `git add` зараз для додавання файлу ``CONTRIBUTING.md'', а потім знову виконаємо `git status`:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

//Both files are staged and will go into your next commit.
Обидва файли додані та будуть включені до наступної фіксації.
//At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.
Припустімо, що саме зараз ви пригадали маленьку зміну, яку ви хочете зробити в `CONTRIBUTING.md` до того, як зафіксувати його.
//You open it again and make that change, and you're ready to commit.
Ви знову його відкриваєте та редагуєте, і ви готові зробити фіксацію.
//However, let's run `git status` one more time:
Втім, давайте ще раз виконаємо `git status`:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

//What the heck?
Якого біса?
//Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.
Тепер `CONTRIBUTING.md` є як в доданих, _так і в_ не доданих.
//How is that possible?
Як таке можливо?
//It turns out that Git stages a file exactly as it is when you run the `git add` command.
Виявляється, що Git додає файл саме таким, яким він був, коли ви виконали команду `git add`.
//If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.
Якщо ви зараз зафіксуєте, в історії збережеться версія `CONTRIBUTING.md`, яка була коли ви востаннє викликали `git add`, а не поточна версія файлу з вашої робочої теки, коли ви виконаєте `git commit`.
//If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:
Якщо ви зміните файл після того, як виконаєте `git add`, вам треба знову виконати `git add` щоб додати останню версію файлу:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

//==== Short Status
==== Короткий Статус

//While the `git status` output is pretty comprehensive, it's also quite wordy. Git also has a short status flag so you can see your changes in a more compact way. If you run `git status -s` or `git status --short` you get a far more simplified output from the command.
Хоча вивід `git status` доволі вичерпний, він також дещо довгий. Git також пропонує опцію короткого перегляду статусу, щоб ви могли побачити свої зміни в більш компактному вигляді. Якщо ви виконаєте `git status -s` або `git status --short`, ви отримаєте набагато простіший вивід.

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

//New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on.
Нові неконтрольовані файли позначаються `??`, нові додані файли позначаються `A`, змінені файли позначаються `M` тощо. 
//There are two columns to the output - the left hand column indicates that the file is staged and the right hand column indicates that it's modified.
Результат має дві колонки – ліва означає, що файл був доданий, а права що він був змінений.
//So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged.
Наприклад у цьому виводі, файл `README` змінений у робочій теці, проте не доданий, а файл `lib/simplegit.rb` змінений та доданий.
//The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.
`Rakefile` був змінений, доданий та знову змінений, тому є зміни в обох колонках.


[[_ignoring]]
//==== Ignoring Files
==== Ігнорування Файлів

//Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.
Буває, що у вас є клас файлів, що ви не хочете щоб Git їх автоматично додавав чи навіть відображав як неконтрольовані.
//These are generally automatically generated files such as log files or files produced by your build system.
Зазвичай це автоматично згенеровані файли, наприклад файли лоґів або файли вироблені вашою системою збірки.
//In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
В таких випадках, ви можете створити файл `.gitignore`, що містить взірці, яким відповідають ці файли.(((ignoring files)))
//Here is an example `.gitignore` file:
Ось приклад файлу `.gitignore`:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

//The first line tells Git to ignore any files ending in ``.o'' or ``.a'' – object and archive files that may be the product of building your code.
Перший рядок каже Git ігнорувати файли, що закінчуються на ``.o'' або ``.a'' – об’єктні та архівні файли, що можуть бути продуктами компіляції вашого коду.
//The second line tells Git to ignore all files that end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.
Другий рядок каже Git ігнорувати усі файли, що закінчуються на тильду (`~`), яка використовується багатьма текстовими редакторами (такими як Emacs) щоб позначати тимчасові файли.
//You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Ви також можете додати теки log, tmp та pid, автоматично згенеровану документацію, тощо.
//Setting up a `.gitignore` file before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.
Заповнення файлу `.gitignore` до початку праці зазвичай гарна думка, адже це допоможе вам випадково не додати файли, які ви не хочете додавати до репозиторію Git.

//The rules for the patterns you can put in the `.gitignore` file are as follows:
Правила для взірців, які ви можете додати до файлу `.gitignore`:

//*  Blank lines or lines starting with `#` are ignored.
*  Пусті рядки та рядки, що починаються з `#`, ігноруються.
//*  Standard glob patterns work.
*  Стандартні ґлоб взірці працюють.
//*  You can end patterns with a forward slash (`/`) to specify a directory.
*  Ви можете завершити взірець похилою рискою (`/`) щоб позначити теку.
//*  You can negate a pattern by starting it with an exclamation point (`!`).
*  Ви можете відкинути взірець, якщо почнете його зі знаку оклику (`!`).

Glob patterns are like simplified regular expressions that shells use.
Ґлоб (glob) взірці – це ніби спрощені регулярні вирази, що їх використовують оболонки.
//An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen(`[0-9]`) matches any character between them (in this case 0 through 9).
Зірочка (`*`) відповідає нулю або більше символам. `[абв]` відповідає будь-якому з символів всередині квадратних дужок (у цьому випадку а, б або в). Знак питання (`?`) відповідає одному символу. Квадратні дужки з символами, що розділені дефісом (`[0-9]`) відповідають будь-якому символу між ними (у даному випадку від 0 до 9).
//You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.
Ви можете використовувати дві зірочки щоб позначити вкладені теки: `a/**/z` відповідає `a/z`, `a/b/z`, `a/b/c/z` тощо.

//Here is another example .gitignore file:
Ось ще один приклад файлу .gitignore:

//[source]
//----
//# no .a files
//*.a
//
//# but do track lib.a, even though you're ignoring .a files above
//!lib.a
//
//# only ignore the root TODO file, not subdir/TODO
///TODO
//
//# ignore all files in the build/ directory
//build/
//
//# ignore doc/notes.txt, but not doc/server/arch.txt
//doc/*.txt
//
//# ignore all .txt files in the doc/ directory
//doc/**/*.txt
//----

[source]
----
# Ніяких файлів .a
*.a

# Проте відстежувати lib.a, хоч ми й ігноруємо .a файли вище
!lib.a

# only ignore the root TODO file, not subdir/TODO
# Ігнорувати тільки файл TODO у корені, не в інших теках subdir/TODO
/TODO

# Ігнорувати усі файли в теці build/
build/

# Ігнорувати doc/notes.txt, проте не doc/server/arch.txt
doc/*.txt

# Ігнорувати усі .txt файли в теці doc/
doc/**/*.txt
----

[TIP]
====
//GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[] if you want a starting point for your project.
GitHub підтримує доволі вичерпний список гарних прикладів файлів `.gitignore` для десятків проектів та мов за адресою https://github.com/github/gitignore[], якщо ви бажаєте мати зразок для свого проекту.
====

[[_git_diff_staged]]
//==== Viewing Your Staged and Unstaged Changes
==== Перегляд Ваших Доданих та Недоданих Змін

//If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
Якщо команда `git status` занадто зверхня для вас – ви хочете знати що саме ви змінили, а не просто які файли ви змінили – ви можете використати команду `git diff`.(((git commands, diff)))
//We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
Ми докладніше розглянемо `git diff` пізніше, проте напевно найчастіше ви її будете використовувати для того щоб дізнатись дві речі: Що ви змінили, проте ще не додали?
//And what have you staged that you are about to commit?
Та що ви додали та збираєтесь зафіксувати?
//Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.
Хоч `git status` відповідає на ці питання дуже загально – тільки показує список файлів, `git diff` показує вам усі додані та видалені рядки – патч, як він є.

//Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
Припустімо, що ви внесли та додали зміни до файлу `README` знову, а потім змінили файл `CONTRIBUTING.md` але не додали його.
//If you run your `git status` command, you once again see something like this:
Якщо ви виконаєте команду `git status`, ви знову побачите щось на кшталт:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//To see what you've changed but not yet staged, type `git diff` with no other arguments:
Щоб побачити зміни, які ви ще не додали, наберіть `git diff` без параметрів:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

//That command compares what is in your working directory with what is in your staging area.
Ця команда порівнює вашу робочу теку з областю додавання.
//The result tells you the changes you've made that you haven't yet staged.
Результат показує вам зміни, котрі ви зробили проте не додали.

//If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
Якщо ви хочете побачити, що ви додали та ввійде до вашої наступної фіксації, ви можете скористатись `git diff --staged`.
//This command compares your staged changes to your last commit:
Ця команда порівнює додані зміни з вашим останнім знімком:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

//It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
Важливо пам’ятати, що команда `git diff` без опцій не відображає всіх змін з останньої фіксації – тільки недодані зміни.
//This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.
Це може збивати з пантелику, адже якщо ви додали всі свої зміни, вивід `git diff` буде пустим.

//For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged. If our environment looks like this:
Наведемо інший приклад, припустимо, що ви додали файл `CONTRIBUTING.md` та знову його відредагували, ви можете скористатись `git diff` щоб побачити додані та недодані зміни. Якщо наше середовище виглядає наступним чином:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# тестовий рядок' >> CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//Now you can use `git diff` to see what is still unstaged
Тепер ви можете використати `git diff` щоб побачити недодані зміни:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# тестовий рядок
----

//and `git diff --cached` to see what you've staged so far (--staged and --cached are synonyms):
та `git diff --cached` щоб побачити наразі додані зміни (--staged та --cached мають однакове значення):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
//.Git Diff in an External Tool
.Git Diff у Зовнішній Утиліті.
====
//We will continue to use the `git diff` command in various ways throughout the rest of the book.
Ми продовжимо використати команду `git diff` різноманітними шляхами в решті книги.
//There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
Є інший шлях подивитись на різницю між файлами, якщо вам більш до смаку графічна чи зовнішня програма для відображення різниці.
//If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like Araxis, emerge, vimdiff and more.
Якщо ви виконаєте `git difftool` замість `git diff`, ви зможете використати будь-яку з програм на кшталт Araxis, emerge, vimdiff тощо.
//Run `git difftool --tool-help` to see what is available on your system.
Виконайте `git difftool --tool-help` щоб дізнатись, що доступно на вашій системі.
====

[[_committing_changes]]
//==== Committing Your Changes
==== Фіксація Ваших Змін

//Now that your staging area is set up the way you want it, you can commit your changes.
Припустимо, що ваша область додавання саме в стані, який ви бажаєте, та тепер ви можете зафіксувати ваші зміни.
//Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
Пам’ятайте, що будь-які недодані зміни – будь-які файли, що ви їх створили чи змінили, але ви не виконали `git add` після їх редагування – не потраплять до цієї фіксації.
//They will stay as modified files on your disk.
Вони так і залишаться зміненими файлами на вашому диску.
//In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
У цьому випадку, припустимо,  що останнього разу, коли ви виконали `git status`, ви побачили, що всі зміни додані, отже ви готові фіксувати ваші зміни.(((git commands, status)))
//The simplest way to commit is to type `git commit`:(((git commands, commit)))
Найпростіший спосіб зафіксувати зміни – набрати `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

//Doing so launches your editor of choice.
Це запустить ваш редактор.
//(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<_getting_started>>).(((editor, changing default)))(((git commands, config)))
(Це редактор, який встановлено в змінній середовища `$EDITOR` вашої оболонки – зазвичай vim або emacs, хоча ви можете налаштувати його як завгодно за допомогою команді `git config --global core.editor`, яку ви бачили в <<_getting_started>>).(((editor, changing default)))(((git commands, config)))

//The editor displays the following text (this example is a Vim screen):
Редактор покаже вам наступний текст (це приклад екрану Vim):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

//You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
Ви бачите, згенероване повідомлення фіксації містить закоментований останній вивід команди `git status` та один пустий рядок нагорі.
//You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
Ви можете видалити ці коментарі на написати своє повідомлення фіксації, або можете залишити їх, щоб вони допомогли вам пригадати що ви фіксуєте.
//(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
(Для навіть більш докладного нагадування про ваші зміни, ви можете передати опцію `-v` до `git commit`.
//Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
Це призведе то того, що у вашому редакторі також будуть відображені всі зміни, що ввійдуть до фіксації.)
//When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).
Коли ви виходите з редактору, Git створює фіксацію з цим повідомленням фіксації (після видалення коментарів та змін до файлів).

//Alternatively, you can type your commit message inline with the `commit` command by specifying it after a -m flag, like this:
Іншим чином, ви можете набрати повідомлення фіксації прямо в команді `commit`, якщо напишете її після опції -m, ось так:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

//Now you've created your first commit!
Тепер ви створили свої першу фіксацію!
//You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.
Ви можете бачити, що команда `commit` розповіла вам дещо про фіксацію: до якої гілки ви зафіксували зміни (`master`), який SHA-1 хеш отримала фіксація (`463dc4f`), скільки файлів було змінено, та статистику щодо доданий та видалених рядків у фіксації.

//Remember that the commit records the snapshot you set up in your staging area.
Пам’ятайте, що фіксація записує знімок, який ви створили в області додавання.
//Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Усе, що ви не додали, залишиться зміненим. Ви можете зробити іншу фіксацію, щоб додати ці зміни до історії.
//Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.
Щоразу ви здійснюєте фіксацію, ви записуєте знімок вашого проекту, до якого ви можете повернутися або порівняти щось пізніше.

//==== Skipping the Staging Area
==== Обходимо Область Додавання

(((staging area, skipping)))
//Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
Хоч область додавання може бути неперевершено корисною для підготовки фіксацій саме до потрібного вам вигляду, іноді вона може буди надто складною для ваших потреб.
//If you want to skip the staging area, Git provides a simple shortcut.
Якщо ви бажаєте обійти область додавання, Git надає вам простий короткий шлях.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:
Додавання опції `-a` до команди `git commit`, змушує Git автоматично додати кожен файл, що вже контролюється до фіксації, що дозволяє вам пропустити команди `git add`:

[source,console]
----
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

//Notice how you don't have to run `git add` on the ``CONTRIBUTING.md'' file in this case before you commit.
Зауважте, що вам не довелося виконувати `git add` до файлу ``CONTRIBUTING.md'' у цьому випадку до фіксації.

[[_removing_files]]
==== Removing Files

(((files, removing)))
//To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
Щоб видалити файл з Git, вам треба прибрати його з контрольованих файлів (вірніше, видалити його з вашої області додавання) та зробити фіксацію.
//The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.
Команда `git rm` це робить, а також видаляє файл з вашої робочої теки, щоб наступного разу він не відображався неконтрольованим.

//If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:
Якщо ви просто видалите файл з вашої робочої теки, він з’явиться під заголовком ``Changed but not updated'' (тобто, _недоданим_) виводу команди `git status`:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

//Then, if you run `git rm`, it stages the file's removal:
Потім, якщо ви виконаєте `git rm`, файл буде доданим на видалення:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

//The next time you commit, the file will be gone and no longer tracked.
Наступної фіксацію, файл зникне та більше не буде контрольованим.
//If you modified the file and added it to the index already, you must force the removal with the `-f` option.
Якщо ви редагували файл та вже додали його до індексу (область додавання), ви маєте примусово видалити його за допомогою опції `-f`.
//This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.
Це мера безпеки, щоб завадити випадковому видаленню даних, які ви не записали до знімку, і тому вони не можуть буди відновлені Git.

//Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
Інша корисна річ, що ви можливо захочете зробити, це зберегти файл у робочій теці, проте видалити його з області додавання.
//In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
Іншими словами, ви можете забажати зберегти файл на диску, проте більше не контролювати його Git.
//This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
Це може бути корисним, якщо ви забули щось додати до свого файлу `.gitignore` та випадково додали, наприклад великий файл журнал чи купа скомпільованих файлів `.a`.
//To do this, use the `--cached` option:
Щоб це зробити, скористайтеся опцією `--cached`:

[source,console]
----
$ git rm --cached README
----

//You can pass files, directories, and file-glob patterns to the `git rm` command.
Ви можете передавати команді `git rm` файли, теки або файлові ґлоб шаблони.
//That means you can do things such as
Це означає, що ви можете зробити щось таке:

[source,console]
----
$ git rm log/\*.log
----

//Note the backslash (`\`) in front of the `*`.
Зверніть увагу на зворотню похилу (`\`) попереду `*`.
//This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
Вона необхідна адже Git має власне розкриття шаблону на додаток до розкриття шаблону вашої оболонки.
//This command removes all files that have the `.log` extension in the `log/` directory.
Ця команда видаляє всі файли, що мають `.log` розширення та знаходяться в теці `log/`.
//Or, you can do something like this:
Або, ви можете зробити щось таке:

[source,console]
----
$ git rm \*~
----

//This command removes all files that end with `~`.
Ця команда видаляє всі файли, що закінчуються на `~`.

[[_git_mv]]
//==== Moving Files
==== Пересування Файлів

(((files, moving)))
//Unlike many other VCS systems, Git doesn't explicitly track file movement.
На відміну від багатьох інших СКВ, Git явно не стежить за пересуванням файлів.
//If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
Якщо ви перейменуєте файл у Git, ніяких метаданих про це не буде збережено.
//However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.
Втім, Git доволі кмітливий, та може сам зрозуміти, що перейменування відбулося вже після нього – ми повернемося до виявлення пересування файлів трохи пізніше.

//Thus it's a bit confusing that Git has a `mv` command.
Тому присутність команди `mv` у Git трохи спантеличує.
//If you want to rename a file in Git, you can run something like
Якщо ви бажаєте перейменувати файл у Git, ви можете виконати щось таке:

[source,console]
----
$ git mv стара_назва нова_назва
----

//and it works fine.
і це зробить що вам треба.
//In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:
Насправді, якщо ви виконаєте щось таке і подивитесь на статус, ви побачите, що Git вважає, що перейменував файл:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

//However, this is equivalent to running something like this:
Втім, це рівнозначно виконанню таких команд:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

//Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
Git без підказок розуміє, що це перейменування файлу, тому неважливо, чи ви перейменували файл так, або за допомогою команди `mv`.
//The only real difference is that `mv` is one command instead of three – it's a convenience function.
Єдина дійсна різниця в тому, що `mv` це одна команда замість трьох – ця команда існує тільки для зручності.
//More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
Більш важливо, що ви можете використати будь-яку утиліту для перейменування файлу та зробити add/rm пізніше, до фіксації змін.
