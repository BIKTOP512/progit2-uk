[[_getting_a_repo]]
=== Створення Git-репозіторія

Для створення Git репозиторію використовують два основних підходи.
Перший приймає існуючий проект або каталог і імпортує його в Git.
Другий клонує існуючий репозіторій Git з іншого сервера.

==== Ініціалізація репозіторія в існуючому каталозі

Якщо ви починаєте використовувати Git для існуючого проекту, вам треба зайти в каталог проекту та виконати:

[source,console]
----
$ git init
----

Це створить новий підкаталог `.git`, який містить всі необхідні файли вашого репозіторія - скелет Git-репозиторія.
На даний момент, у вашому проекті ще нічого не відстежується.
(Див <<_git_internals>> для отримання додаткової інформації про файли, що містяться в каталозі `.git`, котрий ви щойно створили.)(((git commands, init)))

Якщо ви бажаєте додати існуючі файли під версійний контроль (на відміну від порожнього каталогу), ймовірно, вам слід проіндексувати ці файли і зробити перший коміт.
//You can accomplish that with a few `git add` commands that specify the files you want to track, followed by a `git commit`:
Ви можете це зробити за допомогою декількох команд `git add`, що визначають файли, за якими ви бажаєте слідкувати, після яких треба виконати `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'Перша версія проекту'
----

//We'll go over what these commands do in just a minute.
Ми розповімо що саме роблять ці команди за хвильку.
//At this point, you have a Git repository with tracked files and an initial commit.
Наразі, у вас є Git репозиторій з декількома файлами та першим комітом.

[[_git_cloning]]
//==== Cloning an Existing Repository
==== Клонування існуючого репозиторію

//If you want to get a copy of an existing Git repository – for example, a project you'd like to contribute to – the command you need is `git clone`.
Якщо ви бажаєте отримати копію існуючого Git репозиторію – наприклад, проекту, в якому ви хочете прийняти участь – вам потрібна команда `git clone`.
//If you're familiar with other VCS systems such as Subversion, you'll notice that the command is "clone" and not "checkout".
Якщо ви знайомі з іншими СКВ, наприклад Subversion, ви помітите, що команда називається "clone" (клонувати), а не "checkout" (перевірити).
//This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
Це важлива відмінність – замість отримання просто робочої копії, Git отримує повну копію майже всіх даних, що є у сервера.
//Every version of every file for the history of the project is pulled down by default when you run `git clone`.
Кожна версія кожного файлу в історії проекту витягується автоматично, коли ви виконуєте `git clone`.
//In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there – see <<_git_on_the_server>> for more details).
Насправді, якщо щось станеться з диском вашого серверу, ви зазвичай можете використати майже будь-який з клонів на будь-якому клієнті щоб повернути сервер до стану на момент клонування (ви можете втратити деякі серверні хуки (hook), проте усі дані під контролем версій повернуться – дивіться <<_git_on_the_server>> задля детальнішої інформації).

//You clone a repository with `git clone [url]`.(((git commands, clone)))
Щоб клонувати репозиторій треба використати команду `git clone [url]`.(((git commands, clone)))
//For example, if you want to clone the Git linkable library called libgit2, you can do so like this:
Наприклад, якщо ви бажаєте зробити клон бібліотеки Git libgit2, ви можете це зробити так:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

//That creates a directory named ``libgit2'', initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.
Це створить директорію під назвою ``libgit2'', проведе ініціалізацію директорії `.git`, забере всі дані для репозиторію, та приведе директорію до стану останньої версії.
//If you go into the new `libgit2` directory, you'll see the project files in there, ready to be worked on or used.
Якщо ви зайдете до нової директорії `libgit2`, ви побачите, що всі файли проекту на місці, готові для використання.
//If you want to clone the repository into a directory named something other than ``libgit2'', you can specify that as the next command-line option:
Якщо ви бажаєте зробити клон репозиторія в директорію з іншою назвою, ви можете задати її у наступному параметрі команди:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

//That command does the same thing as the previous one, but the target directory is called `mylibgit`.
Ця команда робить те саме, що й попередня, тільки цільова директорія називається `mylibgit`.

//Git has a number of different transfer protocols you can use.
Git має декілька різних протоколів передачі даних, які ви можете використовувати.
//The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.
Попередній приклад використовує протокол `https://`, проте ви також можете побачити `git://` або `user@server:шлях/до/репозиторію.git`, що використовує SSH протокол.
//<<_git_on_the_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.
<<_git_on_the_server>> познайомить вас з усіма можливими варіантами доступу до Git репозиторію, які може мати серверу, та "за" та "проти" кожного.
