[[_git_tagging]]
//=== Tagging
=== Позначки

(((tags)))
//Like most VCSs, Git has the ability to tag specific points in history as being important.
Як і більшість СКВ, Ґіт дозволяє поставити позначку на окремому моменті історій, що чимось видатний.
//Typically people use this functionality to mark release points (v1.0, and so on).
Зазвичай ця функціональність використовується щоб відмітити релізи (v1.0 тощо).
//In this section, you'll learn how to list the available tags, how to create new tags, and what the different types of tags are.
У цій секції, ви дізнаєтесь, як отримати список доступних позначок, як створювати нові позначки, та які типи позначок існують.

//==== Listing Your Tags
==== Показати Ваші Позначки

//Listing the available tags in Git is straightforward.
Отримати список доступних позначок у Ґіті елементарно.
//Just type `git tag`:(((git commands, tag)))
Просто наберіть `git tag`:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

//This command lists the tags in alphabetical order; the order in which they appear has no real importance.
Ця команда виводить список позначок в алфавітному порядку. Цей порядок насправді неважливий.

//You can also search for tags with a particular pattern.
Ви також можете шукати позначки по шаблону.
//The Git source repo, for instance, contains more than 500 tags.
Наприклад, сховище Ґіта містить більш ніж 500 позначок.
//If you're only interested in looking at the 1.8.5 series, you can run this:
Якщо вас цікавлять виключно версії 1.8.5, ви можете виконати:

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

//==== Creating Tags
==== Створення Позначок

//Git uses two main types of tags: lightweight and annotated.
Ґіт має два головних типу позначок: легкі та анотовані.

//A lightweight tag is very much like a branch that doesn't change – it's just a pointer to a specific commit.
Легка позначка дуже схожа на гілку, що не змінюється – це просто вказівник на певну фіксацію.

//Annotated tags, however, are stored as full objects in the Git database.
Анотовані позначки, з іншого боку, зберігаються як повноправні об’єкти у базі даних Ґіта.
//They're checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
Для них обчислюється сума, вони зберігають ім’я та поштову адресу автора, дату створення, та повідомлення позначки. Також вони можуть бути підписані та перевірені за допомогою GNU Privacy Guard (GPG).
//It's generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don't want to keep the other information, lightweight tags are available too.
Взагалі рекомендується використовувати анотовані позначки, щоб ви могли мати всю цю інформацію. Проте якщо вам цього не потрібно та ви бажаєте створити тимчасову позначку, вам доступні легкі позначки.

[[_annotated_tags]]
//==== Annotated Tags
==== Анотовані Позначки

(((tags, annotated)))
//Creating an annotated tag in Git is simple.
Створити анотовану позначку в Ґіт просто.
//The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))
Найлегший спосіб додати `-a` до команди `tag`:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'моя версія 1.4'
$ git tag
v0.1
v1.3
v1.4
----

//The `-m` specifies a tagging message, which is stored with the tag.
`-m` визначає повідомлення позначки, що в ній буде збережено.
//If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.
Якщо ви не вкажете повідомлення анотованої позначки, Ґіт запустить ваш редактор щоб ви могли його набрати.

//You can see the tag data along with the commit that was tagged by using the `git show` command:
Ви можете побачити дані позначки та позначену фіксацію за допомогою команди `git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

//That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.
Це показує інформацію про автора позначки (tagger), дату створення позначки, та повідомлення до інформації про фіксацію.

//==== Lightweight Tags
==== Легкі позначки

(((tags, lightweight)))
//Another way to tag commits is with a lightweight tag.
Другий спосіб позначати фіксації – за допомогою легких позначок.
//This is basically the commit checksum stored in a file – no other information is kept.
Це просто хеш фіксації збережений у файлі – ніякої іншої інформації не зберігається.
//To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` option:
Щоб створити легку позначку, не додавайте опції `-a`, `-s` та `-m`:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

//This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
Цього разу, якщо ви виконаєте `git show` на позначці, ви не побачите додаткової інформації про позначку.(((git commands, show)))
//The command just shows the commit:
Команда покаже тільки фіксацію:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

//==== Tagging Later
==== Позначання Пізніше

//You can also tag commits after you've moved past them.
Ви також можете позначити фіксації, від котрих ви вже пішли.
//Suppose your commit history looks like this:
Припустімо, що ваша історія фіксацій виглядає так:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

//Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.
Тепер, припустимо ви забули позначити проект версії v1.2, що має бути на фіксації ``updated rakefile''.
//You can add it after the fact.
Ви можете додати позначку і зараз.
//To tag that commit, you specify the commit checksum (or part of it) at the end of the command:
Щоб позначити фіксацію, вам треба дописати суму фіксації (чи її частину) наприкінці команди:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

//You can see that you've tagged the commit:(((git commands, tag)))
Ви можете побачити, що ви позначили фіксацію:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
//==== Sharing Tags
==== Розповсюдження Позначок

//By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
Без додаткових опцій команда `git push` не передає позначки на віддалені сервери.(((git commands, push)))
//You will have to explicitly push tags to a shared server after you have created them.
Вам доведеться явно пхати позначки на спільний сервер після створення.
//This process is just like sharing remote branches – you can run `git push origin [tagname]`.
Цей процес не відрізняється від розповсюдження віддалених гілок – вам треба виконати `git push origin [ім’я позначки]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

//If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.
Якщо у вас багато позначок, та ви хочете запхати їх разом, ви також можете використати опцію `--tags` команди `git push`.
//This will transfer all of your tags to the remote server that are not already there.
Це передасть усі ваші позначки до віддаленого серверу, яких там досі нема.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

//Now, when someone else clones or pulls from your repository, they will get all your tags as well.
Тепер, коли хтось інший зробить клон або забере з вашого сховища, він отримає також усі ваші позначки.

//==== Checking out Tags
==== Отримання Позначки

//You can't really check out a tag in Git, since they can't be moved around.
Ви не можете дійсно отримати (`check out`) позначку в Ґіт, адже вона не може бути переміщена.
//If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with  `git checkout -b [branchname] [tagname]`:
Якщо ви бажаєте привести вашу робочу теку вашого сховища до стану, що виглядає як певна позначка, ви можете створити нову гілку з цієї позначки за допомогою `git checkout -b [ім’я гілки] [ім’я позначки]`:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

//Of course if you do this and do a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.
Авжеж, ви можете це зробити та зафіксувати зміни, ваша гілка `version2` буде трохи відрізнятися від вашої позначки `v2.0.0`, адже вона переміститься вперед до ваших нових змін, будьте обережні.
