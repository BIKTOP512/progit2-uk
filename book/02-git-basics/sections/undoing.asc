[[_undoing]]
=== Скасування речей

У будь-який момент, ви можете забажати щось скасувати.
Тут, ми розглянемо декілька базових утиліт для скасування змін, що ви зробили.
Будьте обережними, адже ви не завжди в змозі скасувати деякі з цих скасувань.
Це одна з не багатьох ділянок, де Git може втратити вашу працю, якщо ви помилитесь.

Одне з розповсюджених скасувань відбувається, коли ви зробили коміт зарано, можливо забули додати деякі файли, або ви зіпсували повідомлення коміту.
Якщо ви хочете знову спробувати зробити коміт, ви можете виконати команду `commit` з опцією `--amend`:

[source,console]
----
$ git commit --amend
----

Ця команда бере ваш індекс та використовує його для коміту.
Якщо ви нічого не змінили з останнього коміту (наприклад, ви виконуєте цю команду відразу після попереднього коміту), то ваш знімок буди виглядати так само, та все що ви можете зробити -- це змінити повідомлення коміту.

З’явиться вже знайомий редактор повідомлення коміту, проте в ньому вже міститься повідомлення вашого попереднього коміту.
Ви можете відредагувати повідомлення як завжди, тільки воно перепише ваш попередній коміт.

Наприклад, якщо ви зробили коміт, а потім збагнули, що забули додати якісь зміни у файлі, які мають потрапити до цього коміту, ви можете зробити так:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

У підсумку ви отримаєте єдиний коміт – другий коміт замінить результати першого.

[[_unstaging]]
==== Вилучання файла з індексу

Наступні дві секції покажуть, як скіпати ваші зміни в індексі та робочій директорії.
Гарно те, що команда, яку ви використовуєте для визначення статусу цих двох областей, також нагадує вам, як скасувати зміни в них.
Наприклад, припустімо, що ви змінили два файли та хочете зберегти їх у двох окремих змінах, проте випадково набрали `git add *` та проіндексували їх обох.
Як ви можете вилучити один з них?
Команда `git status` нагадує вам:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Прямо під текстом ``Changes to be committed'' (зміни, що буде збережено), написано "use `git reset HEAD <file>...` to unstage" (скористайтесь `git reset HEAD <file>...` щоб вилучити)
Отже, скористаймося цією порадою, щоб вилучити файл `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Команда трохи дивна, проте працює.
Файл `CONTRIBUTING.md` змінений але неіндексований.

[NOTE]
=====
Хоча `git reset` _може_ бути небезпечним, якщо ви викличете його з `--hard`, у цьому випадку файл у вашій робочій директорії не чіпали.
Виклик `git reset` без опцій безпечний – він змінює тільки індекс.
=====

Поки що цей магічний виклик це все, що вам треба знати про команду `git reset`.
Ми розповімо набагато докладніше про `reset` та як його використовувати щоб робити дійсно цікаві речі у <<_git_reset>>.

==== Скасування змін у зміненому файлі

Що як ви зрозумієте, що ви не хочете залишити ваші зміни до файлу `CONTRIBUTING.md`?
Як ви можете легко скасувати зміни – повернути файл до стану, в якому він був під час вашого останнього коміту (або не вашого, байдуже як ви отримали його)?
На щастя, `git status` розповідає вам і про це.
У виводі останнього прикладу, неіндексована область виглядає так:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Тут чітко розповідають, як скасувати ваші зміни. (третій рядок перекладається `(використайте "git checkout -- <file>..." щоб скасувати зміни у вашій робочій директорії)`)
Так і зробимо:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Як ви бачите, ваших змін більше нема.

[IMPORTANT]
=====
Важливо усвідомлювати, що команда `git checkout -- [file]` небезпечна.
Будь-які зроблені зміни зникли – ви просто скопіювали інший файл поверх них.
Ніколи не використовуйте цю команду, якщо у вас нема абсолютної впевненості, що цей файл вам не потрібен.
=====

Якщо ви бажаєте зберегти зроблені зміни до файлу, проте вам необхідно їх тимчасово прибрати, ми розповімо про ховання та гілки в <<_git_branching>>; це зазвичай кращі засоби.

Пам’ятайте, все __збережене в комітах__ Git майже завжди може бути відновлено.
Навіть коміти у видалених гілках чи коміти, переписані за допомогою `--amend`, можуть бути відновлені (дивіться <<_data_recovery>> задля відновлення даних).
Однак, будь-що втрачене до коміту ви навряд чи колись ще раз побачите.
