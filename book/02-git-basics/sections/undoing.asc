[[_undoing]]
//=== Undoing Things
=== Скасування речей

//At any stage, you may want to undo something.
У будь-який момент, ви можете забажати щось скасувати.
//Here, we'll review a few basic tools for undoing changes that you've made.
Тут, ми розглянемо декілька базових утиліт для скасування змін, що ви зробили.
//Be careful, because you can't always undo some of these undos.
Будьте обережними, адже ви не завжди в змозі скасувати деякі з цих скасувань.
//This is one of the few areas in Git where you may lose some work if you do it wrong.
Це одна з не багатьох ділянок, де Git може втратити вашу працю, якщо ви помилитесь.

//One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.
Одне з розповсюджених скасувань відбувається, коли ви зробили коміт зарано, можливо забули додати деякі файли, або ви зіпсували повідомлення коміту.
//If you want to try that commit again, you can run commit with the `--amend` option:
Якщо ви хочете знову спробувати зробити коміт, ви можете виконати команду `commit` з опцією `--amend`:

[source,console]
----
$ git commit --amend
----

//This command takes your staging area and uses it for the commit.
Ця команда бере ваш індекс та використовує його для коміту.
//If you've made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you'll change is your commit message.
Якщо ви нічого не змінили з останнього коміту (наприклад, ви виконуєте цю команду відразу після попереднього коміту), то ваш знімок буди виглядати так само, та все що ви можете зробити -- це змінити повідомлення коміту.

//The same commit-message editor fires up, but it already contains the message of your previous commit.
З’явиться вже знайомий редактор повідомлення коміту, проте в ньому вже міститься повідомлення вашого попереднього коміту.
//You can edit the message the same as always, but it overwrites your previous commit.
Ви можете відредагувати повідомлення як завжди, тільки воно перепише ваш попередній коміт.

//As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
Наприклад, якщо ви зробили коміт, а потім збагнули, що забули додати якісь зміни у файлі, які мають потрапити до цього коміту, ви можете зробити так:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

//You end up with a single commit – the second commit replaces the results of the first.
У підсумку ви отримаєте єдиний коміт – другий коміт замінить результати першого.

[[_unstaging]]
//==== Unstaging a Staged File
==== Вилучання файла з індексу

//The next two sections demonstrate how to wrangle your staging area and working directory changes.
Наступні дві секції покажуть, як скіпати ваші зміни в індексі та робочій директорії.
//The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
Гарно те, що команда, яку ви використовуєте для визначення статусу цих двох областей, також нагадує вам, як скасувати зміни в них.
//For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.
Наприклад, припустімо, що ви змінили два файли та хочете зберегти їх у двох окремих змінах, проте випадково набрали `git add *` та проіндексували їх обох.
//How can you unstage one of the two?
Як ви можете вилучити один з них?
//The `git status` command reminds you:
Команда `git status` нагадує вам:

[source,console]
----
$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

//Right below the ``Changes to be committed'' text, it says use `git reset HEAD <file>...` to unstage.
Прямо під текстом ``Changes to be committed'' (зміни, що буде збережено), написано "use `git reset HEAD <file>...` to unstage" (скористайтесь `git reset HEAD <file>...` щоб вилучити)
//So, let's use that advice to unstage the `CONTRIBUTING.md` file:
Отже, скористаймося цією порадою, щоб вилучити файл `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//The command is a bit strange, but it works.
Команда трохи дивна, проте працює.
//The `CONTRIBUTING.md` file is modified but once again unstaged.
Файл `CONTRIBUTING.md` змінений але неіндексований.

[NOTE]
=====
//While `git reset` _can_ be a dangerous command if you call it with `--hard`, in this instance the file in your working directory is not touched. Calling `git reset` without an option is not dangerous - it only touches your staging area.
Хоча `git reset` _може_ бути небезпечним, якщо ви викличете його з `--hard`, у цьому випадку файл у вашій робочій директорії не чіпали. Виклик `git reset` без опцій безпечний – він змінює тільки індекс.
=====

//For now this magic invocation is all you need to know about the `git reset` command. We'll go into much more detail about what `reset` does and how to master it to do really interesting things in <<_git_reset>>.
Поки що цей магічний виклик це все, що вам треба знати про команду `git reset`. Ми розповімо набагато докладніше про `reset` та як його використовувати щоб робити дійсно цікаві речі у <<_git_reset>>.

//==== Unmodifying a Modified File
==== Скасування змін у зміненому файлі

//What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
Що як ви зрозумієте, що ви не хочете залишити ваші зміни до файлу `CONTRIBUTING.md`?
//How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
Як ви можете легко скасувати зміни – повернути файл до стану, в якому він був під час вашого останнього коміту (або не вашого, байдуже як ви отримали його)?
//Luckily, `git status` tells you how to do that, too.
На щастя, `git status` розповідає вам і про це.
//In the last example output, the unstaged area looks like this:
У виводі останнього прикладу, неіндексована область виглядає так:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//It tells you pretty explicitly how to discard the changes you've made.
Тут чітко розповідають, як скасувати ваші зміни. (третій рядок перекладається `(використайте "git checkout -- <file>..." щоб скасувати зміни у вашій робочій директорії)`)
//Let's do what it says:
Так і зробимо:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

//You can see that the changes have been reverted.
Як ви бачите, ваших змін більше нема.

[IMPORTANT]
=====
//It's important to understand that `git checkout -- [file]` is a dangerous command. Any changes you made to that file are gone – you just copied another file over it.
Важливо усвідомлювати, що команда `git checkout -- [file]` небезпечна. Будь-які зроблені зміни зникли – ви просто скопіювали інший файл поверх них.
//Don't ever use this command unless you absolutely know that you don't want the file.
Ніколи не використовуйте цю команду, якщо у вас нема абсолютної впевненості, що цей файл вам не потрібен.
=====

//If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<_git_branching>>; these are generally better ways to go.
Якщо ви бажаєте зберегти зроблені зміни до файлу, проте вам необхідно їх тимчасово прибрати, ми розповімо про ховання та гілки в <<_git_branching>>; це зазвичай кращі засоби.

//Remember, anything that is __committed__ in Git can almost always be recovered.
Пам’ятайте, все __збережене в комітах__ Git майже завжди може бути відновлено.
//Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see <<_data_recovery>> for data recovery).
Навіть коміти у видалених гілках чи коміти, переписані за допомогою `--amend`, можуть бути відновлені (дивіться <<_data_recovery>> задля відновлення даних).
//However, anything you lose that was never committed is likely never to be seen again.
Однак, будь-що втрачене до коміту ви навряд чи колись ще раз побачите.
