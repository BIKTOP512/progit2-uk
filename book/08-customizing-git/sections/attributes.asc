=== Атрибути Git

(((attributes)))
Деякі з цих налаштувань також можуть бути встановлені для окремих шляхів, щоб Git застосовував їх лише для піддиректорій чи підмножини файлів.
Ці налаштування для окремих шляхів називаються в Git атрибутами та встановлюються або у файлі `.gitattributes` в одній з ваших директорій (зазвичай в корені проекту) або у файлі `.git/info/attributes`, якщо ви не бажаєте зберігати файл атрибутів у коміті вашого проекту.

За допомогою атрибутів, ви можете, серед іншого, встановлювати окремі стратегії злиття для конкретних файлів або директорій вашого проекту, казати Git, як отримувати різницю між не текстовими файлами, або встановити фільтр вмісту перед його отриманням з Git або додаванням до Git.
У цій секції, ви дізнаєтесь про деякі атрибути, які ви можете встановити для шляхів вашого проетку Git, та побачите декілька прикладів практичного використання цього функціоналу.

==== Двійкові файли

(((binary files)))
Одним файним фокусом, для якого ви можете використати атрибути Git, це повідомити Git які файли є двійковими (у випадках, коли іншим чином цього не можна зʼясувати) та надати Git спеціальні інструкції щодо поводження з цими файлами.
Наприклад, деякі текстові файли можуть бути згенеровані машиною та непридатними для отримання різниці, у той час як різницю між деякими бінарними файлами можна отримати.
Ви побачите, як вказати Git які з них є якими.

===== Визначення двійкових файлів

Деякі файли виглядають як текстові, проте для будь-якого використання та мети, їх варто вважати двійковими даними.
Наприклад, проекти Xcode на Mac містять файли, які закінчуються на `.pbxproj`, які є набором даних JSON (текстовий формат Javascript даних) записаний на диск середовищем розробки, в якому записано налаштування збірки тощо.
Хоча технічно це текстовий файл (адже містить лише UTF-8), ви не бажаєте щоб його сприймали таким, оскільки це легковага база даних – ви не можете зливати вміст, якщо дві людини змінять її, та дивитись різницю між ними марно.
Файл призначений для використання машиною.
Якщо стисло, ви бажаєте, щоб цей файл сприймався як двійковий.

Щоб сказати Git сприймати всі файли `pbxproj` як двійкові дані, додайте наступний рядок до файлу `.gitattributes`:

[source]
----
*.pbxproj binary
----

Тепер, Git не буде намагатись конвертувати чи виправляти проблеми зі символами нового рядка; ані намагатиметься обчислити та вивести різницю для змін у цьому файли при виконанні `git show` чи `git diff` у вашому проекті.

===== Порівняння двійкових файлів

Ви також можете використати функціонал атрибутів Git для ефективного порівняння двійкових файлів.
Для цього треба сказати Git, як перетворити ваші двійкові дані на текст, який може порівняти звичайний diff.

Спершу, ви використаєте цю техніку для вирішення однієї з найбільш дратівних проблем, що їх знає людство: керування версіями документів Microsoft Word.
Всі знають, що Word найжахливіший з існуючих редакторів, проте, на диво, усі досі ним користуються.
Якщо ви бажаєте керувати версіями документи Word, ви можете додати їх до сховища Git та подеколи зберігати в комітах; проте яка з того користь?
Якщо виконати `git diff` у звичайний спосіб, ви побачите лише:

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ
----

Ви не можете напряму порівняти дві версії, хіба отримаєте обидві та продивитесь їх вручну, чи не так?
Виявляється, ви можете це зробити доволі добре за допомогою атрибутів Git.
Додайте наступний рядок до свого файлу `.gitattributes`:

[source]
----
*.docx diff=word
----

Це означає, що для будь-якого файлу, що відповідає шаблону (`.docx`), Git має використати філтр ``word'', коли ви намагаєтесь продивитись різницю, яка містить зміни.
Що це за фільтр ``word''?
Вам доведеться його налаштувати.
Тут ви зробите так, щоб Git використовував програму `docx2txt` для перетворення документів Word на читабельні текстові файли, які він потім відповідно порівняє.

Спершу, треба встановити `docx2txt`; ви можете завантажити його за адресою http://docx2txt. Дотримуйтесь інструкцій з файлу `INSTALL`, щоб покласти його кудись, де оболонка (shell) зможе його знайти.
Далі, ви напишете скрипт-обгортку, яка перетворює вивід на формат, який очікує Git.
Створіть файл, що знаходиться десь у вашому path та називається `docx2txt` та додайте туди такий вміст:

[source,console]
----
#!/bin/bash
docx2txt.pl $1 -
----

Не забудьте зробити `chmod a+x` з цим файлом.
Нарешті, ви можете налаштувати Git, щоб він використовував цей скрипт:

[source,console]
----
$ git config diff.word.textconv docx2txt
----

Тепер Git знає, що якщо йому треба порівняти два відбитки, та якийсь з них закінчується на `.docx`, то Git має передати ці два файли фільтру ``word'', який визначено як програму `docx2txt`.
Це призводить до гарних текстових версій ваших файлів Word перед спробами порівняти їх.

Ось приклад: Розділ 1 цієї книжки перетворили на формат Word та зберігли в коміті сховища Git.
Потім додали новий параграф.
Ось що покаже `git diff`:

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so.
 1.1. About Version Control
 What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
+Testing: 1, 2, 3.
 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
----

Git успішно та стисло доповідає нам, що ми додали рядок ``Testing: 1, 2, 3.'', як і було насправді.
Це не ідеально – зміни формату не буде показано тут – проте це безперечно працює.

Ще одна цікава проблема, яку ви можете вирішити таким чином повʼязана з порівнянням зображень.
Один спосіб це зробити -- пропустити зображення через фільтр, який видобуває їхню інформацію EXIF – метадані, що записані у більшості форматів зображень.
Якщо ви завантажите та встановите програму `exiftool`, то зможете використати її для перетворення ваших зображень на текст про метадані, отже принаймні diff покаже вам текстове представлення будь-яких впроваджених змін:

[source,console]
----
$ echo '*.png diff=exif' >> .gitattributes
$ git config diff.exif.textconv exiftool
----

Якщо ви заміните зображення у вашому проекті та виконаєте `git diff`, то побачите щось таке:

[source]
----
diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha
----

Вам легко побачити, що як розмір файлу, як і розміри зображення змінилися.

[[_keyword_expansion]]
==== Keyword Expansion

(((keyword expansion)))
SVN- or CVS-style keyword expansion is often requested by developers used to those systems.
The main problem with this in Git is that you can't modify a file with information about the commit after you've committed, because Git checksums the file first.
However, you can inject text into a file when it's checked out and remove it again before it's added to a commit.
Git attributes offers you two ways to do this.

First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.
If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.
It's important to notice that it isn't the SHA-1 of the commit, but of the blob itself:

[source,console]
----
$ echo '*.txt ident' >> .gitattributes
$ echo '$Id$' > test.txt
----

The next time you check out this file, Git injects the SHA-1 of the blob:

[source,console]
----
$ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $
----

However, that result is of limited use.
If you've used keyword substitution in CVS or Subversion, you can include a datestamp – the SHA-1 isn't all that helpful, because it's fairly random and you can't tell if one SHA-1 is older or newer than another just by looking at them.

It turns out that you can write your own filters for doing substitutions in files on commit/checkout.
These are called ``clean'' and ``smudge'' filters.
In the `.gitattributes` file, you can set a filter for particular paths and then set up scripts that will process files just before they're checked out (``smudge'', see <<filters_a>>) and just before they're staged (``clean'', see <<filters_b>>).
These filters can be set to do all sorts of fun things.

[[filters_a]]
.The ``smudge'' filter is run on checkout.
image::images/smudge.png[The ``smudge'' filter is run on checkout.]

[[filters_b]]
.The ``clean'' filter is run when files are staged.
image::images/clean.png[The ``clean'' filter is run when files are staged.]

The original commit message for this feature gives a simple example of running all your C source code through the `indent` program before committing.
You can set it up by setting the filter attribute in your `.gitattributes` file to filter `*.c` files with the ``indent'' filter:

[source]
----
*.c filter=indent
----

Then, tell Git what the ``indent'' filter does on smudge and clean:

[source,console]
----
$ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat
----

In this case, when you commit files that match `*.c`, Git will run them through the indent program before it stages them and then run them through the `cat` program before it checks them back out onto disk.
The `cat` program does essentially nothing: it spits out the same data that it comes in.
This combination effectively filters all C source code files through `indent` before committing.

Another interesting example gets `$Date$` keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.
Here is a small Ruby script that does that:

[source,ruby]
----
#! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:"%ad" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')
----

All the script does is get the latest commit date from the `git log` command, stick that into any `$Date$` strings it sees in stdin, and print the results – it should be simple to do in whatever language you're most comfortable in.
You can name this file `expand_date` and put it in your path.
Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.
You'll use a Perl expression to clean that up on commit:

[source,console]
----
$ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'
----

This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.
Now that your filter is ready, you can test it by setting up a file with your `$Date$` keyword and then setting up a Git attribute for that file that engages the new filter:

[source,console]
----
$ echo '# $Date$' > date_test.txt
$ echo 'date*.txt filter=dater' >> .gitattributes
----

If you commit those changes and check out the file again, you see the keyword properly substituted:

[source,console]
----
$ git add date_test.txt .gitattributes
$ git commit -m "Testing date expansion in Git"
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$
----

You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the `.gitattributes` file is committed and passed around with the project, but the driver (in this case, `dater`) isn't, so it won't work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly.

==== Exporting Your Repository

(((archiving)))
Git attribute data also allows you to do some interesting things when exporting an archive of your project.

===== `export-ignore`

You can tell Git not to export certain files or directories when generating an archive.
If there is a subdirectory or file that you don't want to include in your archive file but that you do want checked into your project, you can determine those files via the `export-ignore` attribute.

For example, say you have some test files in a `test/` subdirectory, and it doesn't make sense to include them in the tarball export of your project.
You can add the following line to your Git attributes file:

[source]
----
test/ export-ignore
----

Now, when you run git archive to create a tarball of your project, that directory won't be included in the archive.

===== `export-subst`

When exporting files for deployment you can apply `git log`'s formatting and keyword-expansion processing to selected portions of files marked with the
`export-subst` attribute.

For instance, if you want to include a file named `LAST_COMMIT` in your project, and have metadata about the last commit automatically injected into it when `git archive` runs, you can for example set up the file like this:

[source,console]
----
$ echo 'Last commit date: $Format:%cd by %aN$' > LAST_COMMIT
$ echo "LAST_COMMIT export-subst" >> .gitattributes
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives'
----

When you run `git archive`, the contents of the archived file will look like this:

[source,console]
----
$ git archive HEAD | tar xCf ../deployment-testing -
$ cat ../deployment-testing/LAST_COMMIT
Last commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott Chacon
----

The substitutions can include for example the commit message and any git notes, and git log can do simple word wrapping:

[source.console]
----
$ echo '$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$' > LAST_COMMIT
$ git commit -am 'export-subst uses git log's custom formatter

git archive uses git log's `pretty=format:` processor
directly, and strips the surrounding `$Format:` and `$`
markup from the output.
'
$ git archive @ | tar xfO - LAST_COMMIT
Last commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700
       export-subst uses git log's custom formatter

         git archive uses git log's `pretty=format:` processor directly, and 
         strips the surrounding `$Format:` and `$` markup from the output.
----

The resulting archive is suitable for deployment work, but like any exported archive it isn't suitable for further development work.

==== Merge Strategies

(((merging, strategies)))
You can also use Git attributes to tell Git to use different merge strategies for specific files in your project.
One very useful option is to tell Git to not try to merge specific files when they have conflicts, but rather to use your side of the merge over someone else's.

This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.
Say you have a database settings file called `database.xml` that is different in two branches, and you want to merge in your other branch without messing up the database file.
You can set up an attribute like this:

[source]
----
database.xml merge=ours
----

And then define a dummy `ours` merge strategy with:

[source,console]
----
$ git config --global merge.ours.driver true
----

If you merge in the other branch, instead of having merge conflicts with the `database.xml` file, you see something like this:

[source,console]
----
$ git merge topic
Auto-merging database.xml
Merge made by recursive.
----

In this case, `database.xml` stays at whatever version you originally had.
