//=== Scripting GitHub
=== Скриптування GitHub

//So now we've covered all of the major features and workflows of GitHub, but any large group or project will have customizations they may want to make or external services they may want to integrate.
Отже тепер ми розглянули весь основний функціонал та процеси роботи GitHub, проте будь-яка велика група чи проект матимуть необхідність в додаткових налаштуваннях або в інтеграції зовнішніх сервісів.

//Luckily for us, GitHub is really quite hackable in many ways. In this section we'll cover how to use the GitHub hooks system and its API to make GitHub work how we want it to.
На щастя, GitHub дуже легко змінювати у багатьох напрямках. У цій секції ми розглянемо як користуватись системою хуків GitHub та його API щоб GitHub працював саме так, як ви хочете.

//==== Hooks
==== Хуки

//The Hooks and Services section of GitHub repository administration is the easiest way to have GitHub interact with external systems.
Секції Хуки та Сервіси адміністративної сторінки сховища GitHub -- це найпростіший метод налаштувати взаємодію між GitHub та зовнішніми системами.

//===== Services
===== Сервіси

//First we'll take a look at Services.
Спочатку ми подивимось на Сервіси.
//Both the Hooks and Services integrations can be found in the Settings section of your repository, where we previously looked at adding Collaborators and changing the default branch of your project.
І Хуки і Сервіси можна знайти в секції Settings (налаштування) вашого сховища, де ми раніше бачили як додавати Співпрацівників та змінювати типову гілку вашого проекту.
//Under the ``Webhooks and Services'' tab you will see something like <<_services_hooks>>.
У вкладці ``Webhooks and Services'' (веб хуки та сервіси) ви побачите щось таке <<_services_hooks>>.

[[_services_hooks]]
//.Services and Hooks configuration section.
.Секція конфігурації Сервіси та Хуки.
//image::images/scripting-01-services.png[Services and hooks]
image::images/scripting-01-services.png[Сервіси та Хуки]

//There are dozens of services you can choose from, most of them integrations into other commercial and open source systems.
Є десятки сервісів, з яких ви можете вибирати, більшість з них є інтеграціями в інші комерційні та відкриті системи.
//Most of them are for Continuous Integration services, bug and issue trackers, chat room systems and documentation systems.
Більшість з них є сервісами Безперервної Інтеграції, систем відстеження помилок, чатів та систем документації.
//We'll walk through setting up a very simple one, the Email hook.
Ми детально розглянемо налаштування простого прикладу: поштовий хук.
//If you choose ``email'' from the ``Add Service'' dropdown, you'll get a configuration screen like <<_service_config>>.
Якщо ви виберете ``email'' зі спадного віконця ``Add Service'' (додати сервіс), ви побачите екран налаштування <<_service_config>>

[[_service_config]]
//.Email service configuration.
.Налаштування сервісу Email.
//image::images/scripting-02-email-service.png[Email service]
image::images/scripting-02-email-service.png[Сервіс Email]

//In this case, if we hit the ``Add service'' button, the email address we specified will get an email every time someone pushes to the repository.
У цьому випадку, якщо ми натиснемо кнопку ``Add service'' (додати сервіс), на вказану поштову адресу буде надходити лист щоразу, коли хтось викладатиме зміни до сховища.
//Services can listen for lots of different types of events, but most only listen for push events and then do something with that data.
Сервіси можуть слідкувати за різноманітними типами подій, проте більшість слідкує виключно за подіями запису до сховища, а тоді щось роблять з цією інформацією.

//If there is a system you are using that you would like to integrate with GitHub, you should check here to see if there is an existing service integration available.
Якщо ви бажаєте інтегрувати з GitHub якусь систему, що ви зараз використовуєте, спочатку перевірте тут -- можливо для неї вже існує сервіс інтеграції.
//For example, if you're using Jenkins to run tests on your codebase, you can enable the Jenkins builtin service integration to kick off a test run every time someone pushes to your repository.
Наприклад, якщо ви використовуєте Jenkins для виконання тестів вашого коду, ви можете ввімкнути вбудований сервіс інтеграції Jenkins щоб розпочинати тести щоразу, коли хтось заливає зміни до вашого сховища.

//===== Hooks
===== Хуки

//If you need something more specific or you want to integrate with a service or site that is not included in this list, you can instead use the more generic hooks system.
Якщо ви бажаєте зробити щось більш специфічне або ви бажаєте інтегрувати сервіс чи сайт, якого нема в цьому списку, ви можете використати більш загальну систему хуків.
//GitHub repository hooks are pretty simple.
Хуки сховища GitHub доволі прості.
//You specify a URL and GitHub will post an HTTP payload to that URL on any event you want.
Ви задаєте URL та GitHub буде запит HTTP до цього URL на будь-які події, що вас цікавлять.

//Generally the way this works is you can setup a small web service to listen for a GitHub hook payload and then do something with the data when it is received.
Зазвичай це працює так: ви запускаєте маленький веб сервіс, що слухає запити від хуку GitHub, а потім робить щось з отриманими даними.

//To enable a hook, you click the ``Add webhook'' button in <<_services_hooks>>. This will bring you to a page that looks like <<_web_hook>>.
Щоб увімкнути хук, треба натиснути на кнопку ``Add webhook'' (додати веб-хук) у <<_services_hooks>>. Це переведе вас на сторінку, що виглядає як <<_web_hook>>.

[[_web_hook]]
//.Web hook configuration.
.Конфігурація веб хуку.
//image::images/scripting-03-webhook.png[Web hook]
image::images/scripting-03-webhook.png[Веб хук]

//The configuration for a web hook is pretty simple.
Налаштувати веб хук доволі просто.
//In most cases you simply enter a URL and a secret key and hit ``Add webhook''.
Найчастіше вам просто треба задати URL та секретний ключ, і натиснути ``Add webhook''.
//There are a few options for which events you want GitHub to send you a payload for -- the default is to only get a payload for the `push` event, when someone pushes new code to any branch of your repository.
Є декілька опцій щодо яких подій ви бажаєте щоб GitHub відправляв вам інформацію -- без додаткових налаштувань GitHub відправляє запит тільки щодо події `push`, коли хтось викладає новий код до будь-якої гілки вашого сховища

//Let's see a small example of a web service you may set up to handle a web hook.
Подивимося на маленький приклад веб сервісу, що ви можете налаштувати для обробки веб хуку.
//We'll use the Ruby web framework Sinatra since it's fairly concise and you should be able to easily see what we're doing.
Ми використаємо веб фреймворк Sinatra (Ruby), адже він доволі лаконічний та вам має бути легко зрозуміти, що ми робимо.

//Let's say we want to get an email if a specific person pushes to a specific branch of our project modifying a specific file.
Припустімо, що ми бажаємо отримувати листа якщо окрема людина викладає зміни до окремої гілки нашого проекту та змінює окремий файл.
//We could fairly easily do that with code like this:
Цього доволі легко досягти за допомогою такого коду:

[source,ruby]
----
require 'sinatra'
require 'json'
require 'mail'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON

  # gather the data we're looking for
  pusher = push["pusher"]["name"]
  branch = push["ref"]

  # get a list of all the files touched
  files = push["commits"].map do |commit|
    commit['added'] + commit['modified'] + commit['removed']
  end
  files = files.flatten.uniq

  # check for our criteria
  if pusher == 'schacon' &&
     branch == 'ref/heads/special-branch' &&
     files.include?('special-file.txt')

    Mail.deliver do
      from     'tchacon@example.com'
      to       'tchacon@example.com'
      subject  'Scott Changed the File'
      body     "ALARM"
    end
  end
end
----

//Here we're taking the JSON payload that GitHub delivers us and looking up who pushed it, what branch they pushed to and what files were touched in all the commits that were pushed.
Тут ми отримуємо JSON з надісланого GitHub запиту, та знаходимо в ньому хто залив зміни, до якої гілки та які файли були змінені у всіх комітах.
//Then we check that against our criteria and send an email if it matches.
Потім ми звіряємо це з нашими умовами та надсилаємо листа, якщо все збігається.

//In order to develop and test something like this, you have a nice developer console in the same screen where you set the hook up.
Щоб розробляти та тестувати такі веб сервіси, у вас є гарна консоль розробника на тій сторінці, на який ви налаштовували хук.
//You can see the last few deliveries that GitHub has tried to make for that webhook.
Ви можете дізнатись подробиці останніх запитів, що їх намагався зробити GitHub для цього вебхуку.
//For each hook you can dig down into when it was delivered, if it was successful and the body and headers for both the request and the response.
Для кожного хуку ви можете дізнатись, коли він був відправлений, чи був він успішним, а також тіло та заголовки і запиту, і відповіді.
//This makes it incredibly easy to test and debug your hooks.
Це все дуже допомагає при тестуванні та виправленні ваших хуків.

[[_web_hook_debug]]
//.Web hook debugging information.
.Інформація для виправлення веб хуків.
//image::images/scripting-04-webhook-debug.png[Webhook debug]
image::images/scripting-04-webhook-debug.png[Інформація про вебхук]

//The other great feature of this is that you can redeliver any of the payloads to test your service easily.
Ще одна чудова функція -- це те, що ви можете ще раз надіслати будь-який з запитів щоб легко протестувати ваш сервіс.

//For more information on how to write webhooks and all the different event types you can listen for, go to the GitHub Developer documentation at: https://developer.github.com/webhooks/
Задля докладнішої інформацією щодо написання вебхуків та про усі різноманітні типи подій, на які ви можете реагувати, перейдіть до документації розробника GitHub за адресою: https://developer.github.com/webhooks/

//==== The GitHub API
==== GitHub API

(((GitHub, API)))
//Services and hooks give you a way to receive push notifications about events that happen on your repositories, but what if you need more information about these events?
Сервіси та хуки надають вам можливість отримувати повідомлення про події, що стались з вашими сховищами, проте що як вам потрібно більше інформації про ці події?
//What if you need to automate something like adding collaborators or labeling issues?
Що як вам треба автоматизувати щось на кшталт додавання співпрацівників або додавання міток (`label`) до завдань (`issues`)?

//This is where the GitHub API comes in handy.
Саме з цим нам допоможе GitHub API.
//GitHub has tons of API endpoints for doing nearly anything you can do on the website in an automated fashion.
GitHub має безліч кінцевих точок API, що дозволяють робити майже все, що можна робити на сайті в автоматичному режимі.
//In this section we'll learn how to authenticate and connect to the API, how to comment on an issue and how to change the status of a Pull Request through the API.
У цій секції ми навчимось авторизуватися та встановлювати зв’язок з API, як коментувати завдання та як змінювати статус Запиту на Пул через API.

//==== Basic Usage
==== Базове Використання

//The most basic thing you can do is a simple GET request on an endpoint that doesn't require authentication.
Найпростіше, що ви можете зробити -- це простий GET запит до кінцевої точки, що не вимагає авторизації.
//This could be a user or read-only information on an open source project.
Це можете бути інформація тільки для читання про користувача чи проект з відкритим кодом.
//For example, if we want to know more about a user named ``schacon'', we can run something like this:
Наприклад, якщо ми хочемо дізнатись більше про користувача з ім’ям ``schacon'', ми можемо виконати щось таке:

[source,javascript]
----
$ curl https://api.github.com/users/schacon
{
  "login": "schacon",
  "id": 70,
  "avatar_url": "https://avatars.githubusercontent.com/u/70",
# …
  "name": "Scott Chacon",
  "company": "GitHub",
  "following": 19,
  "created_at": "2008-01-27T17:19:28Z",
  "updated_at": "2014-06-10T02:37:23Z"
}
----

//There are tons of endpoints like this to get information about organizations, projects, issues, commits -- just about anything you can publicly see on GitHub.
Є безліч кінцевих точок як ця, щоб отримувати інформацію про організації, проекти, завдання коміти -- про все, що ви можете публічно бачити на GitHub.
//You can even use the API to render arbitrary Markdown or find a `.gitignore` template.
Ви навіть можете використовувати API щоб відобразити будь-який Markdown чи знайти шаблон `.gitignore`.

[source,javascript]
----
$ curl https://api.github.com/gitignore/templates/Java
{
  "name": "Java",
  "source": "*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
"
}
----


//==== Commenting on an Issue
==== Коментування Завдання

//However, if you want to do an action on the website such as comment on an Issue or Pull Request or if you want to view or interact with private content, you'll need to authenticate.
Втім, якщо ви бажаєте щось зробити на веб сайті, наприклад додати коментар до Завдання чи Запиту на Пул, або ви бажаєте побачити або взаємодіяти з приватними даними, вам доведеться авторизуватись.

//There are several ways to authenticate. You can use basic authentication with just your username and password, but generally it's a better idea to use a personal access token.
Є декілька шляхів це зробити. Ви можете використати базову авторизацію, просто зі своїм ім’ям та паролем, проте зазвичай краще використовувати особисту помітку авторизації (`access token`).
//You can generate this from the ``Applications'' tab of your settings page.
Ви можете згенерувати її з вкладки ``Applications'' вашої сторінки налаштувань.

[[_access_token]]
//.Generate your access token from the ``Applications'' tab of your settings page.
.Згенеруйте свою помітку авторизації з вкладки ``Applications'' вашої сторінки налаштувань.
//image::images/scripting-05-access-token.png[Access Token]
image::images/scripting-05-access-token.png[Помітка авторизації]

//It will ask you which scopes you want for this token and a description.
Вас запитають опис та в яких контекстах ви бажаєте щоб ця помітка працювала.
//Make sure to use a good description so you feel comfortable removing the token when your script or application is no longer used.
Переконайтесь, що ви використовуєте зрозумілий опис, щоб ви відчували впевненість при видаленні цієї помітки, коли ваш скрипт або програма більше не потрібні.

//GitHub will only show you the token once, so be sure to copy it.
GitHub покаже вам помітку тільки одного разу, отже обов’язково скопіюйте її.
//You can now use this to authenticate in your script instead of using a username and password.
Тепер ви можете використовувати її щоб авторизуватись у ваших скриптах замість використання імені та паролю.
//This is nice because you can limit the scope of what you want to do and the token is revocable.
Це добре, бо ви можете обмежити контекст використання цієї помітки, та її легко скасувати.

//This also has the added advantage of increasing your rate limit.
Також це підвищує обмеження частоти запитів.
//Without authenticating, you will be limited to 60 requests per hour.
Без авторизації, ви можете робити не більше 60 запитів на годину.
//If you authenticate you can make up to 5,000 requests per hour.
Якщо ви авротизуєтеся, ви можете робити до 5000 запитів на годину.

//So let's use it to make a comment on one of our issues.
Отже використаймо її щоб прокоментувати одне з наших завдань.
//Let's say we want to leave a comment on a specific issue, Issue #6.
Припустімо, що ми бажаємо залишити коментар до окремого завдання, Завдання №6.
//To do so we have to do an HTTP POST request to `repos/<user>/<repo>/issues/<num>/comments` with the token we just generated as an Authorization header.
Щоб це зробити, ми маємо надіслати HTTP POST запит до `repos/<ім’я користувача>/<сховище>/issues/<номер>/comments` з поміткою, що ми щойно згенерували в заголовку `Authorization`.

[source,javascript]
----
$ curl -H "Content-Type: application/json" \
       -H "Authorization: token TOKEN" \
       --data '{"body":"A new comment, :+1:"}' \
       https://api.github.com/repos/schacon/blink/issues/6/comments
{
  "id": 58322100,
  "html_url": "https://github.com/schacon/blink/issues/6#issuecomment-58322100",
  ...
  "user": {
    "login": "tonychacon",
    "id": 7874698,
    "avatar_url": "https://avatars.githubusercontent.com/u/7874698?v=2",
    "type": "User",
  },
  "created_at": "2014-10-08T07:48:19Z",
  "updated_at": "2014-10-08T07:48:19Z",
  "body": "A new comment, :+1:"
}
----

//Now if you go to that issue, you can see the comment that we just successfully posted as in <<_api_comment>>.
Тепер, якщо ви відкриєте обговорення цього завдання, ви побачите коментар, що ви його щойно зробили в <<_api_comment>>.

[[_api_comment]]
//.A comment posted from the GitHub API.
.Відправлений за допомогою GitHub API коментар.
//image::images/scripting-06-comment.png[API Comment]
image::images/scripting-06-comment.png[API Коментар]

//You can use the API to do just about anything you can do on the website -- creating and setting milestones,
// assigning people to Issues and Pull Requests, creating and changing labels, accessing commit data, creating new commits and branches,
// opening, closing or merging Pull Requests, creating and editing teams, commenting on lines of code in a Pull Request, searching the site and on and on.
Ви можете використовувати API майже для всього, що ви можете робити на сайті -- створення та встановлення віх,
призначення людей на Завдання та Запити на Пул, створення та зміна міток, отримувати дані про коміт, створювати нові коміти та гілки,
відкривання, закривання та зливання Запитів на Пул, створення та редагування команд, коментування рядків коду з Запиту на Пул, пошук на сайті тощо.

//==== Changing the Status of a Pull Request
==== Зміна Статусу Запиту на Пул

//One final example we'll look at since it's really useful if you're working with Pull Requests.
Ми розглянемо ще один останній приклад, адже це дійсно корисно, якщо ви працюєте з Запитами на Пул.
// Each commit can have one or more statuses associated with it and there is an API to add and query that status.
Кожен коміт може мати один чи більше статусів, що з ним асоційовані, та існує API щоб додавати та отримувати ці статуси.

//Most of the Continuous Integration and testing services make use of this API to react to pushes by testing the code that was pushed, and then report back if that commit has passed all the tests.
Більшість сервісів Безперервної Інтеграції та тестування використовують цей API щоб реагувати на нові зміни, спочатку перевіривши зміни, а потім повідомляти, чи пройшов коміт усі тести.
//You could also use this to check if the commit message is properly formatted, if the submitter followed all your contribution guidelines, if the commit was validly signed -- any number of things.
Ви також можете використовувати цей API щоб перевірити, чи вірно є повідомлення коміту вірно оформленим, чи виконав автор змін усі ваші інструкції по тому, як робити внески, чи є коміт вірно підписаним -- багато всього.

//Let's say you set up a webhook on your repository that hits a small web service that checks for a `Signed-off-by` string in the commit message.
Припустімо, що ви налаштували вебхук для вашого сховища, який відправляє запит до маленького веб сервісу, що перевіряє, чи присутній в повідомленні коміту рядок `Signed-off-by`.

[source,ruby]
----
require 'httparty'
require 'sinatra'
require 'json'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON
  repo_name = push['repository']['full_name']

  # look through each commit message
  push["commits"].each do |commit|

    # look for a Signed-off-by string
    if /Signed-off-by/.match commit['message']
      state = 'success'
      description = 'Successfully signed off!'
    else
      state = 'failure'
      description = 'No signoff found.'
    end

    # post status to GitHub
    sha = commit["id"]
    status_url = "https://api.github.com/repos/#{repo_name}/statuses/#{sha}"

    status = {
      "state"       => state,
      "description" => description,
      "target_url"  => "http://example.com/how-to-signoff",
      "context"     => "validate/signoff"
    }
    HTTParty.post(status_url,
      :body => status.to_json,
      :headers => {
        'Content-Type'  => 'application/json',
        'User-Agent'    => 'tonychacon/signoff',
        'Authorization' => "token #{ENV['TOKEN']}" }
    )
  end
end
----

//Hopefully this is fairly simple to follow.
Сподіваємось, що цей скрипт доволі легко зрозуміти.
//In this web hook handler we look through each commit that was just pushed, we look for the string 'Signed-off-by' in the commit message and finally we POST via HTTP to the `/repos/<user>/<repo>/statuses/<commit_sha>` API endpoint with the status.
У цьому обробнику ми перевіряємо кожен викладений коміт, шукаємо рядок 'Signed-off-by' у повідомленні коміту, та нарешті відправляємо HTTP POST запит до кінцевої точки `/repos/<користувач>/<сховище>/statuses/<хеш_коміту>` зі статусом.

//In this case you can send a state ('success', 'failure', 'error'), a description of what happened, a target URL the user can go to for more information and a ``context'' in case there are multiple statuses for a single commit.
У цьому випадку ви можете відправити статус ('success' - успіх, 'failure' - невдача, 'error' - помилка), опис того, що сталося, а також посилання, за яким користувач може перейти щоб отримати більше інформації та ``контекст'' (`context`) у разі декількох статусів для одного коміту.
//For example, a testing service may provide a status and a validation service like this may also provide a status -- the ``context'' field is how they're differentiated.
Наприклад, сервіс тестування може надати статус та такий як цей перевірочний сервіс також може надати статус -- поле ``context'' дозволяє їх розрізнити.

//If someone opens a new Pull Request on GitHub and this hook is set up, you may see something like <<_commit_status>>.
Якщо хтось відкриє новий Запит на Пул на GitHub, та цей хук налаштований, ви можете побачити щось схоже на <<_commit_status>>.

[[_commit_status]]
//.Commit status via the API.
.Статус коміту через API.
//image::images/scripting-07-status.png[Commit status]
image::images/scripting-07-status.png[Статус коміту]

//You can now see a little green check mark next to the commit that has a ``Signed-off-by'' string in the message and a red cross through the one where the author forgot to sign off.
Тепер ви можете бачити маленьку зелену пташку біля коміту поруч з рядком ``Signed-off-by'' у повідомленні. А також червоний хрестик біля того коміту, який автор забув підписати.
//You can also see that the Pull Request takes the status of the last commit on the branch and warns you if it is a failure.
Ви також можете бачити, що Запит на Пул отримує статус останнього коміту гілки, та попереджає вас, якщо він невдалий.
//This is really useful if you're using this API for test results so you don't accidentally merge something where the last commit is failing tests.
Це дійсно корисно, якщо ви використовуєте це API для результатів тестів, щоб ви випадково не злили якийсь Запит на Пул, в якому останній коміт не проходить тести.

==== Octokit

//Though we've been doing nearly everything through `curl` and simple HTTP requests in these examples, several open-source libraries exist that make this API available in a more idiomatic way.
Хоч ми майже все в прикладах робили за допомогою `curl` та простих HTTP запитів, існує декілька бібліотек з відкритим кодом, що пропонують більш зручний інтерфейс до API.
//At the time of this writing, the supported languages include Go, Objective-C, Ruby, and .NET.
У момент написання, існують бібліотеки для підтримки мов Go, Objective-C, Ruby та .NET.
//Check out http://github.com/octokit[] for more information on these, as they handle much of the HTTP for you.
Перевірте http://github.com/octokit[] задля докладнішої інформації, адже вони обробляють більшість HTTP замість вас.

//Hopefully these tools can help you customize and modify GitHub to work better for your specific workflows.
Сподіваємось, що ці інструменти можуть вам допомогти та змінити GitHub, щоб він краще працював у ваших специфічних процесах роботи.
//For complete documentation on the entire API as well as guides for common tasks, check out https://developer.github.com[].
Для повної документації всього API, а також інструкцій для поширених завдань, дивіться https://developer.github.com[].
