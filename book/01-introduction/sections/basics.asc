=== Основи Git

Отже, що таке Git в двох словах?
Важливо розуміти цей розділ, тому що, якщо ви розумієте, що таке Git і основи того, як він працює, потім ефективне використання Git, ймовірно, буде набагато простішим.
Доки ви вивчаєте Git, спробуйте очистити свій розум від речей, які ви, можливо, знаєте про інші СКВ, такі як Subversion і Perforce; це допоможе вам уникнути деяких проблем при його використанні. 
Git зберігає і думає про інформацію зовсім по-іншому, в порівнянні з інші системами, хоча користувальницький інтерфейс дуже схожий, і розуміння цих відмінностей допоможе вам уникнути плутанини при його використанні.

==== Знімки, а не відмінності

The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.
Conceptually, most other systems store information as a list of file-based changes.
These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.

.Збереження даних, як переліку змін від базової версії кожного файлу.
image::images/deltas.png[Storing data as changes to a base version of each file.]

Git не оброблює та не зберігає свої дані таким чином.
Замість цього, Git вважає свої дані більш як набір знімків мініатюрної файлової системи.
Кожен раз, коли ви робите комміт, тобто зберігаєте стан вашого проекту в Git, він запам'ятовує як виглядають всі ваші файли в той момент і зберігає посилання на цей знімок.
Для ефективності, якщо файли не змінилися, Git не зберігає файли знову, просто робить посилання на попередній ідентичний файл, котрий вже зберігається. Git вважає свої дані більш як *потік знімків*. 

//.Storing data as snapshots of the project over time.
.Зберігання даних як знімки проекту за хронологією.
//image::images/snapshots.png[Git stores data as snapshots of the project over time.]
image::images/snapshots.png[Ґіт зберігає дані як знімки проекту за хронологією.]

//This is an important distinction between Git and nearly all other VCSs.
Це дуже важлива різниця між Ґітом та майже всіма іншими СКВ.
//It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.
З цієї причини у Ґіті було заново переосмислено майже кожен аспект контролю версій, які інші системи просто копіювали з попереднього покоління.
//This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.
Це зробило Ґіт більш схожим на мініатюрну файлову систему з деякими неймовірно потужними вбудованими інструментами на додаток, а не просто СКВ.
//We'll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in <<_git_branching>>.
Ми познайомимось з деякими перевагами, які ви отримаєте при сприйнятті інформації подібним чином, у <<_git_branching>>, де йдеться про гілки.

//==== Nearly Every Operation Is Local
// Майже кожна операція — локальна

//Most operations in Git only need local files and resources to operate – generally no information is needed from another computer on your network.
Більшість операцій у Ґіті потребують лише локальних файлів та ресурсів для здійснення операцій — немає необхідності в інформації з інших комп’ютерів вашої мережі.
//If you're used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.
Якщо ви звикли до ЦСКВ, де більшість операцій обтяжені такими мережевими запитами, то цей аспект може привести вас до думки, що боги швидкості наділили Git неземною силою.
//Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.
Через те, що повна історія проекту знаходиться на вашому локальному диску, більшість операцій здійснюються майже миттєво.

//For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you – it simply reads it directly from your local database.
Наприклад, для перегляду історії проекту, Ґіт не має потреби брати її з серверу, він просто зчитує її прямо з локальної бази даних.
//This means you see the project history almost instantly.
Це означає, що ви отримуєте історію проекту не встигнувши кліпнути оком.
//If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.
Якщо ви бажаєте переглянути відмінності між поточною версією файлу та його редакцією місячної давності, Git знайде копію збережену місяць тому і проведе локальне обчислення різниці замість того, щоб звертатись за цим до віддаленого серверу чи спочатку робити запит на отримання старішої версії файлу.

//This also means that there is very little you can't do if you're offline or off VPN.
Також це означає, що за відсутності мережевого з’єднання ви не будете мати особливих обмежень.
//If you get on an airplane or a train and want to do a little work, you can commit happily until you get to a network connection to upload.
Перебуваючи в літаку чи потязі можна цілком комфортно фіксувати зміни доки не відновите з’єднання з мережею для їх завантаження.
//If you go home and can't get your VPN client working properly, you can still work.
Якщо ви прийшли додому та не можете змусити належним чином працювати свій VPN-клієнт, все одно можна продовжувати роботу.
//In many other systems, doing so is either impossible or painful.
В багатьох інших системах подібні дії або неможливі, або пов’язані з безліччю труднощів.
//In Perforce, for example, you can't do much when you aren't connected to the server; and in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).
Наприклад, у Perforce, без з’єднання з мережею вам не вдасться зробити багато; у Subversion та CVS ви можете редагувати файли, але не можете фіксувати внесені зміни (оскільки немає зв’язку з базою даних).
//This may not seem like a huge deal, but you may be surprised what a big difference it can make.
На перший погляд такі речі здаються незначними, але ви будете вражені наскільки велике значення вони можуть мати.

//==== Git Has Integrity
==== Ґіт Цілісний

//Everything in Git is check-summed before it is stored and is then referred to by that checksum.
Будь-що в Git, перед збереженням, отримує контрольну суму, за якою потім і можна на нього посилатися.
//This means it’s impossible to change the contents of any file or directory without Git knowing about it.
Таким чином, неможливо змінити файл чи теку так, щоб Ґіт про це не дізнався.
//This functionality is built into Git at the lowest levels and is integral to its philosophy.
Цей функціонал вбудовано в систему на найнижчих рівнях і є невід’ємною частиною її філософії.
//You can’t lose information in transit or get file corruption without Git being able to detect it.
Ви не можете втратити інформацію при передачі чи отримати пошкоджений файл без відома Ґіта.

//The mechanism that Git uses for this checksumming is called a SHA-1 hash.(((SHA-1)))
Механізм, який використовується для цього контролю, називається хеш SHA-1.(((SHA-1)))
//This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.
Він являє собою 40-символьну послідовність цифр та перших літер латинського алфавіту (a-f) і вираховується на основі вмісту файлу чи структури теки в Git.
//A SHA-1 hash looks something like this:
SHA-1 хеш виглядає це приблизно так:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

//You will see these hash values all over the place in Git because it uses them so much.
При роботі з Ґітом ви повсюди зустрічатимете такі хеші, адже Ґіт постійно їх використовує.
//In fact, Git stores everything in its database not by file name but by the hash value of its contents.
Фактично, Ґіт зберігає все не за назвою файлу, а саме за значенням хешу його змісту.

//==== Git Generally Only Adds Data
=== Ґіт, зазвичай, тільки додає дані

//When you do actions in Git, nearly all of them only add data to the Git database.
Коли ви виконуєте певні дії в Ґіті, при цьому, майже завжди відбувається виключно додавання інформації до бази даних Ґіта.
//It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
Складно змусити систему зробити щось невиправне чи повністю видалити дані будь-яким чином.
// As in any VCS, you can lose or mess up changes you haven't committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.
Як і в будь-якій СКВ, ви можете втратити чи зіпсувати лише незафіксовані зміни. Але це майже неможливо, коли вже зафіксовано знімок, особливо, якщо ви регулярно надсилаєте свою базу до іншого сховища.

//This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
Це робить використання Ґіта приємним, оскільки ми точно можемо експериментувати без загрози щось зіпсувати.
//For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<_undoing>>.
Про те, як Ґіт зберігає інформацію та як можна відновити втрачені дані, що нібито загублені, детальніше розповідається у <<_undoing>>.

//==== The Three States
=== Три стани

// Now, pay attention.
А зараз, будьте уважні.
// This is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Це найважливіша річ, яку потрібно запам’ятати, якщо ви хочете щоб подальше вивчення Ґіта пройшло гладко.
// Git has three main states that your files can reside in: committed, modified, and staged.
Ґіт має три основних стани, в яких можуть перебувати ваші файли: зафіксований (commited), змінений (modified) та доданий (staged).
// Committed means that the data is safely stored in your local database.
Зафіксований означає, що дані безпечно збережено в локальній базі даних.
// Modified means that you have changed the file but have not committed it to your database yet.
Змінений означає, що у файл внесено редагування, які ще не зафіксовано у базі даних.
// Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
Доданий стан виникає тоді, коли ви позначаєте змінений файл у поточній версії, щоб ці зміни ввійшли до наступного фіксованого знімку.

//This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.
Це приводить нас до трьох головних відділів проекту під управлінням Ґіта: тека Ґіта, робоча тека та область додавання.

.Working directory, staging area, and Git directory.
//image::images/areas.png["Working directory, staging area, and Git directory."]
image::images/areas.png["Робоча тека, область додавання та тека Git."]

//The Git directory is where Git stores the metadata and object database for your project.
У теці Ґіта система зберігає метадані та базу даних об’єктів вашого проекту.
//This is the most important part of Git, and it is what is copied when you clone a repository from another computer.
Це найважливіша частина Ґіта, саме вона копіюється при клонуванні сховища з іншого комп’ютеру.

//The working directory is a single checkout of one version of the project.
Робоча тека являє собою одну окрему версію проекту, взяту зі сховища.
//These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
Ці файли видобуваються з бази даних у теці Ґіта та розміщуються на диску для подальшого використання та редагування.

//The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
Область додавання це файл, що зазвичай знаходиться в теці Ґіта і містить інформацію про те, що буде збережено при наступної фіксації змін.
It's sometimes referred to as the ``index'', but it's also common to refer to it as the staging area.
//It’s sometimes referred to as the index, but it’s becoming standard to refer to it as the staging area.
Іноді цей файл називають ``покажчик'' (index), проте зазвичай його називають областю додавання.

//The basic Git workflow goes something like this:
Найпростіший процес взаємодії з Ґітом виглядає приблизно так:

//1. You modify files in your working directory.
1. Ви редагуєте файли у своїй робочій теці.
//2. You stage the files, adding snapshots of them to your staging area.
2. Надсилаєте файли в область додавання, шляхом створення знімків їх поточного стану.
//3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.
3. Робите фіксацію, яка бере файли в області додавання і остаточно зберігає цей знімок у теці Ґіта.

//If a particular version of a file is in the Git directory, it's considered committed.
У випадку, якщо окрема версія файлу вже є в теці Ґіта, цей файл вважається зафіксованим.
//If it's modified but has been added to the staging area, it is staged.
Якщо він зазнав змін і перебуває в області додавання, то він доданий.
//And if it was changed since it was checked out but has not been staged, it is modified.
Якщо ж його стан відрізняється від того, який було зафіксовано, і файл не знаходиться в області додавання, то він називається зміненим.
//In <<_git_basics_chapter>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
У <<_git_basics_chapter>> ви дізнаєтесь більше про ці стани, а також про те, як використовувати їхні переваги або взагалі пропускати етап області додавання.
