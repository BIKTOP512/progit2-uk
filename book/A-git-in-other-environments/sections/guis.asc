=== Графічні інтерфейси

(((GUIs)))(((Graphical tools)))
Природнє середовище Git -- це термінал.
Спочатку новий функціонал буде зʼявлятися там, і лише з командного рядку вам доступна вся повнота влади Git.
Проте простий текст не є найкращим вибором для всіх завдань; іноді вам потрібне саме візуальне відображення, а деяким користувачам набагато зручніше використовувати інтерфейс навів-та-клацнув.

Важливо зазначити, що різні інтерфейси пристосовані для різних процесів роботи.
Деякі клієнти надають лише ретельно відібрану підмножину функціоналу Git, аби підтримати окремий спосіб праці, який автор вважає ефективним.
Якщо розглядати під цим кутом, жоден з цих інструментів не можна назвати ``кращим'' за будь-який інший: вони просто більш підходять для свого призначення.
Також зауважте, що не існує нічого, що могли б зробити ці графічні клієнти, чого не може клієнт командного рядка; все одно з командного рядку у вас буде найбільше можливостей та контролю для роботи з вашими репозиторіями.

==== `gitk` та `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Коли ви встановлюєте Git, ви також отримуєте його візуальні інструменти, `gitk` та `git-gui`.

`gitk` -- це графічний переглядач історії.
Вважайте його здібною обгорткою над `git log` та `git grep`.
ЇЇ варто використовувати, коли ви намагаєтесь знайти щось, що сталося в минулому, або для візуалізації історії вашого проекту.

Gitk найлегше викликати з командного рядка.
Просто перейдіть до вашого репозиторію Git (cd), та наберіть:

[source,console]
----
$ gitk [git log options]
----

Gitk приймає багато опцій командного рядка, більшість з яких передається далі до `git log`.
Напевно однією з найкорисніших є опція `--all`, яка каже gitk показувати коміти, які досяжні з будь-якого посилання, а не лише HEAD.
Інтерфейс gitk виглядає так:

.Переглядач історії `gitk`.
image::images/gitk.png[Переглядач історії `gitk`.]

Нагорі розташовано щось трохи схоже на результат `git log --graph`; кожна точка відповідає коміту, лінії відповідають батьківським стосункам, а посилання показані кольоровими блоками.
Жовта точка відповідає HEAD, а червона -- зміни, які ще не збережені в коміті.
Знизу розташовано перегляд вибраного коміту; коментарі та латка ліворуч, а стислий підсумок -- праворуч.
Між ними колекція елементів керування для пошуку в історії.

`git-gui`, з іншого боку, переважно є інструментом для доопрацювання комітів.
Його теж найлегше викликати з командного рядка:

[source,console]
-----
$ git gui
-----

А виглядає він так:

.Інструмент для створення комітів `git-gui`.
image::images/git-gui.png[Інструмент для створення комітів `git-gui`.]

Ліворуч знаходиться індекс; неіндексовані зміни -- нагорі, а індексовані -- знизу.
Ви можете переміщувати файли цілком між двома станами, якщо клацнете на їхніх іконках, або можете вибрати файл для перегляду, якщо клацнете на його назві.

Нагорі праворуч розташовано відображення різниці, яке показує зміни в наразі вибраному файлі.
Ви можете індексувати окремі клаптики (або окремі рядки), якщо клацнете в цій області правою кнопкою.

Знизу праворуч розташовано повідомлення та область дій. Наберіть своє повідомлення до текстового поля та клацніть ``Commit'', щоб зробити щось схоже на `git commit`.
Ви також можете виправити останній коміт, якщо виберете перемикач ``Amend'', який оновить область ``Staged Changes'' (індексовані зміни) вмістом останнього коміту.
Потім ви можете просто індексувати чи деіндексувати деякі зміни, змінювати повідомлення коміту, та клацнути на ``Commit'' знову, щоб замінити старий коміт новим.

`gitk` та `git-gui` -- це приклади інструментів для окремої таски.
Кожен з них створено для окремої мети (відображати історію та створювати коміти відповідно), та не включають функціонал, який не є необхідним для цих завдань.


==== GitHub for Mac and Windows

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub has created two workflow-oriented Git clients: one for Windows, and one for Mac.
These clients are a good example of workflow-oriented tools – rather than expose _all_ of Git's functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this:

.GitHub for Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub for Windows.
image::images/github_win.png[GitHub for Windows.]

They are designed to look and work very much alike, so we'll treat them like a single product in this chapter.
We won't be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the ``changes'' view (which is where you'll spend most of your time) is in order.

* On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the ``+'' icon at the top of this area.
* In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
  (On Windows, the commit history is displayed directly below this; on Mac, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the ``Sync'' button at the top-right, which is the primary way you interact over the network.

[NOTE]
====
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they will happily work with any repository, and do network operations with any Git host.
====

===== Installation

GitHub for Windows can be downloaded from https://windows.github.com[], and GitHub for Mac from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.

Both are ``evergreen'' – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch Powershell with Posh-git, which we'll talk more about later in this chapter.

The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.

===== Recommended Workflow

Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the ``GitHub Flow.''
We cover this in more detail in <<_github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.

Branch management is one of the areas where the two tools diverge.
On Mac, there's a button at the top of the window for creating a new branch:

.``Create Branch'' button on Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]

On Windows, this is done by typing the new branch's name in the branch-switching widget:

.Creating a branch on Windows.
image::images/branch_widget_win.png[Creating a branch on Windows.]

Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the ``Commit'' button (ctrl-enter or ⌘-enter).

The main way you interact with other repositories over the network is through the ``Sync'' feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:

. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.

This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.

===== Summary

These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.


==== Other GUIs

There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at http://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
