=== Основи Галуження та Зливання

Розглянемо простий приклад галуження та зливання на схемі, котра трапляється в реальності:

. Вам потрібно внести зміни до веб сайту.
. Створюєте гілку для своєї задачі.
. Працюєте в цій гілці.

В якийсь момент вам дзвонять і кажуть, що є більш важлива задача та потрібно термінове виправлення. 
Ви зробите таке:

. Переключитеся на головну гілку.
. Створите гілку-виправлення.
. Після тестування зливаєте гілку-виправлення та надсилаєте в основну гілку.
. Переключаєтеся на першопочаткову гілку та продовжуєте роботу над задачею.

[[_basic_branching]]
==== Базове Галуження

(((branches, basic workflow)))
Скажімо, ви працюєте над проектом і вже маєте кілька комітів.

.A simple commit history
image::images/basic-branching-1.png[Проста історія комітів.]

Тепер вирішили працювати над задачею №53 з системи, котрою користується в компанії.
Щоб створити гілку для цієї задачі та одразу перейти на неї, виконайте команду `git checkout` з параметром `-b`:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Це скорочений запис наступного:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Створення нового вказівника гілки
image::images/basic-branching-2.png[Creating a new branch pointer.]

Ви працюєте над змінами до сайту та комітите зміни. 
Таким чином ваша гілка `iss53` починає рухається вперед, оскільки ви на неї раніше переключилися (тобто вказівник `HEAD` вказує на цю гілку):

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.Гілка iss53 рухається
image::images/basic-branching-3.png[Гілка iss53 рухається вперед разом з вашими змінами.]

Вам подзвонили про проблему на сайті, якої потрібно якнайшвидше позбутися.
Завдяки Git, вам не потрібно відсилати це виправлення разом із змінами в `iss53`, також, ви не докладете багато зусиль для того щоб сказувати поточні зміни та працювати над виправленням в основній гілці.
Все що потрібно, це знову переключитися на основну гілку `master`.

Проте, зверніть увагу на те, що якщо у вашій робочій директорії чи області з підготовленими файлами є незакомічені зміни, це спричинить конфлікт з `master` та Git не дозволить зробити це переключення.
Найкраще спочатку очистити вашу робочу область перед переключеннями.

Способи як це зробити (сховати (stash) та виправити (commit amend)) ми розглянемо пізніше в <<_git_stashing>>.
Зараз вважаємо що ми закомітили асі зміни в `iss53`, отже можна перейти на `master`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

Тепер ваша робоча директорія точно в такому стані, як була до того, як ви почали працювати над №53 і ви можете сфокусуватися на терміновому виправленні.
Важливо запам'ятати: коли перемикаєтеся між гілками, Git відновлює вашу робочу теку, щоб вона виглядала так як після вашого останнього коміту.
Git додає, видаляє та змінює файли автоматично, щоб впевнитися що ваша робоча копія точно відповідає тому якою була гілка на час вашого останнього коміту. 

Далі вам знову потрібно зробити ще одне швидке випралення.
Створимо гілку "hotfix" і будемо там працювати поки не закінчимо:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Гілка `hotfix`, базована на `master`
image::images/basic-branching-4.png[Гілка `hotfix`, базована на `master`.]

Тепер можете запускати тести, щоб впевнитися що зміна годиться і злити (merge) гілку назад у master щоб викласти зміни на виробництво.
Робиться це за допомогою команди `git merge` command:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Зверніть увагу на фразу ``fast-forward'' у цьому злитті.
Через те, що коміт, який зливався, належав гілці, що була безпосереднім нащадком гілки куди зливалося (гілка `master` вверх по течії відносно `hotfix`), Git просто переміщує вказівник вперед.
Іншими словами, коли ви зливаєте один коміт з іншим, і це можна досягнути слідуючи історії першого коміту, Git просто переставляє вказівник, оскільки немає змін-відмінностей, які потрібно зливати разом - це називається ``перемоткою'' (``fast-forward'').

Тепер ваша зміна міститься в знімку коміту, на який вказує `master` і ви можете викладати зміни.

.`master` перемотаний на `hotfix`
image::images/basic-branching-5.png[`master` перемотаний на `hotfix`.]

Після того, як ваше супер важливе виправлення викладено, можна повернутися до роботи, яку було відкладено через швидке виправлення.
Але спочатку видалимо гілку `hotfix` - нам її більше не потрібно, а `master` вказує на той самий знімок коду.
Для цього виконайте `git branch` з опцією `-d`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Тепер перемикайтеся на вашу незакінчену гілку для №53 і продовжуйте роботу.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Продовження роботи на `iss53`
image::images/basic-branching-6.png[Продовження роботи на `iss53`.]

Зауважте, що зміни з гілки `hotfix` відсутні в гілці `iss53`.
Якщо вам потрібні ці зміни підчас роботи над №53, ви можете злити `master` з `iss53` командою `git merge master`, або просто почекати до того моменту коли ви будете інтегровувати `iss53` в `master`.

[[_basic_merging]]
==== Basic Merging

(((branches, merging)))(((merging)))
Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.
In order to do that, you'll merge in your `iss53` branch, much like you merged in your `hotfix` branch earlier.
All you have to do is check out the branch you wish to merge into and then run the `git merge` command:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

This looks a bit different than the `hotfix` merge you did earlier.
In this case, your development history has diverged from some older point.
Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.
In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.

.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge.]

Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent.

.A merge commit
image::images/basic-merging-2.png[A merge commit.]

It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.
This makes merging a heck of a lot easier in Git than in these other systems.

Now that your work is merged in, you have no further need for the `iss53` branch.
You can close the ticket in your ticket-tracking system, and delete the branch:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Basic Merge Conflicts

(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.

If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.

[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<_advanced_merging>>.
====

After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future – why you did what you did, if it's not obvious.
