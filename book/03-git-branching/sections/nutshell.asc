[[_git_branches_overview]]
//=== Branches in a Nutshell
=== Гілки у Кількох Словах

//To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.
Щоб дійсно зрозуміти як Ґіт працює з гілками, нам треба повернутись назад та розібратись, як Ґіт зберігає дані.

//As you may remember from <<_getting_started>>, Git doesn't store data as a series of changesets or differences, but instead as a series of snapshots.
Як ви можете пам’ятати з <<_getting_started>>, Ґіт зберігає дані не як послідовність змін, а як послідовність знімків.

//When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
Коли ви фіксуєте зміни, Ґіт зберігає об’єкт фіксації, що містить вказівник на знімок змісту, який ви додали.
//This object also contains the author's name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.
Цей об’єкт також містить ім’я та поштову адресу автора, набране вами повідомлення та вказівники на фіксацію або фіксації, що були прямо до цієї фіксації (батько чи батьки): нуль для першої фіксації, одна фіксація для нормальної фіксації, та декілька фіксацій для фіксацій, що вони є результатом злиття двох чи більше гілок.

//To visualize this, let's assume that you have a directory containing three files, and you stage them all and commit.
Щоб це уявити, припустимо, що у вас є тека з трьома файлами, які ви додали та зафіксували.
//Staging the files checksums each one (the SHA-1 hash we mentioned in <<_getting_started>>), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:
Додання файлів обчислює контрольну суму для кожного (SHA-1 хеш про котрий ми згадували в <<_getting_started>>), зберігає версію файлу в сховищі Ґіта (Ґіт називає їх блобами), та додає їх контрольні суми до області додавання:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'Перша фіксація проекту'
----

//When you create the commit by running `git commit`, Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository.
Коли ви створили фіксацію за допомогою `git commit`, Ґіт обчислив контрольну суму кожної теки (у цьому випадку, тільки кореневої теки) та зберігає ці об’єкти дерева в сховищі Ґіт.
//Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.(((git commands, commit)))
Потім Ґіт створює об’єкт фіксації, що зберігає метадані та вказівник на корінь дерева проекту, щоб він міг відтворити цей знімок, коли потрібно.(((git commands, commit)))

//Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.
Ваше Ґіт сховище тепер зберігає п’ять об’єктів: по одному блобу зі змістом на кожен з трьох файлів, одне дерево, що перелічує зміст теки та вказує, які файли зберігаються у яких блобах, та одну фіксацію, що вказує на корінь дерева, та зберігає метадані фіксації.

//.A commit and its tree
.Фіксація як дерево
//image::images/commit-and-tree.png[A commit and its tree.]
image::images/commit-and-tree.png[Фіксація та її дерево.]

//If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.
Якщо ви зробите якісь зміна та зафіксуєте знову, наступна фіксація буде зберігати вказівник на попередню.

//.Commits and their parents
.Фіксації та їх батьки
//image::images/commits-and-parents.png[Commits and their parents.]
image::images/commits-and-parents.png[Фіксації та їх батьки.]

//A branch in Git is simply a lightweight movable pointer to one of these commits.
Гілка в Ґіт це просто легкий вказівник, що може пересуватись, на одну з цих фіксацій.
//The default branch name in Git is `master`.
Загальноприйнятим ім’ям першої гілки в Ґіт є `master`.
//As you start making commits, you're given a master branch that points to the last commit you made.
Коли ви почнете робити фіксації, вам надається гілка `master`, що вказує на останню зроблену фіксацію.
//Every time you commit, it moves forward automatically.
Щоразу ви фіксуєте, вона переміщується вперед автоматично.

[NOTE]
====
//The ``master'' branch in Git is not a special branch.(((master)))
Гілка ``master'' у Ґіті не має нічого особливого.(((master)))
//It is exactly like any other branch.
Вона нічим не відрізняється від інших.
//The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.
Єдина причина, чому майже кожне сховище має таку гілку – команда `git init` автоматично її створює, і більшість людей не мають клопоту змінити її.
====

//.A branch and its commit history
.Гілка та її історія фіксацій
//image::images/branch-and-history.png[A branch and its commit history.]
image::images/branch-and-history.png[Гілка та її історія фіксацій.]

[[_create_new_branch]]
//==== Creating a New Branch
==== Створення Нової Гілки

(((branches, creating)))
//What happens if you create a new branch?
Що відбувається, якщо ви створюєте нову гілку?
//Well, doing so creates a new pointer for you to move around.
Ну, це створює новий вказівник, щоб ви могли пересуватися.
//Let's say you create a new branch called testing.
Припустімо, ви створюєте нову гілку під назвою testing.
//You do this with the `git branch` command:(((git commands, branch)))
Ви це робите за допомогою команди `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

//This creates a new pointer at the same commit you're currently on.
Це створює новий вказівник на фіксацію, в якій ви зараз знаходитесь.

//.Two branches pointing into the same series of commits
.Дві гілки вказують на одну послідовність фіксацій
image::images/two-branches.png[Дві гілки вказують на одну послідовність фіксацій.]

//How does Git know what branch you're currently on?
Звідки Ґіт знає, на якої гілці ви зараз знаходитесь?
//It keeps a special pointer called `HEAD`.
Він зберігає особливий вказівник під назвою `HEAD`.
//Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
Завважте, що це геть інша концепція `HEAD`, ніж в інших СКВ, з якими ви могли працювати, таких як Subversion чи CVS.
//In Git, this is a pointer to the local branch you're currently on.
У Ґіту це просто вказівник на локальну гілку, на якій ви знаходитесь.
//In this case, you're still on master.
В даному випадку, ви досі на гілці master.
//The `git branch` command only _created_ a new branch – it didn't switch to that branch.
Команда `git branch` тільки _створює_ нову гілку – вона не переключає на цю гілку.

//.HEAD pointing to a branch
.HEAD вказує на гілку
//image::images/head-to-master.png[HEAD pointing to a branch.]
image::images/head-to-master.png[HEAD вказує на гілку.]

//You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing. This option is called `--decorate`.
Ви легко можете це побачити за допомогою простої опції  команди `git log`, що може показати куди вказують вказівники гілок. Ця опція називається `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

//You can see the ``master'' and ``testing'' branches that are right there next to the `f30ab` commit.
Як бачите, гілки ``master'' та ``testing'' прямо поруч з фіксацією `f30ab`.

[[_switching_branches]]
//==== Switching Branches
==== Переключення Гілок

(((branches, switching)))
//To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
Щоб переключитися на існуючу гілку, треба виконати команду `git checkout`.(((git commands, checkout)))
//Let's switch to the new testing branch:
Переключимося на нову гілку testing:

[source,console]
----
$ git checkout testing
----

//This moves `HEAD` to point to the `testing` branch.
Це пересуває `HEAD`, щоб він вказував на гілку `testing`.

//.HEAD points to the current branch
.HEAD вказує на поточну гілку
image::images/head-to-testing.png[HEAD вказує на поточну гілку.]

//What is the significance of that?
Чому це важливо?
//Well, let's do another commit:
Ну, давайте зробимо ще одну фіксацію:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Зробив зміни'
----

//.The HEAD branch moves forward when a commit is made
.Гілка HEAD пересувається уперед при фіксації
image::images/advance-testing.png[Гілка HEAD пересувається уперед при фіксації.]

//This is interesting, because now your testing branch has moved forward, but your master branch still points to the commit you were on when you ran `git checkout` to switch branches.
Це цікаво, бо тепер ваша гілка testing пересунулась уперед, а ваша гілка master досі вказує на фіксацію, що й у момент виконання `git checkout` для переключення гілок.
//Let's switch back to the master branch:
Переключимося назад до гілки master:

[source,console]
----
$ git checkout master
----

//.HEAD moves when you checkout
.HEAD пересувається, коли ви отримуєте (checkout)
//image::images/checkout-master.png[HEAD moves when you checkout.]
image::images/checkout-master.png[HEAD пересувається, коли ви отримуєте (checkout).]

//That command did two things.
Ця команда зробила дві речі.
//It moved the HEAD pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to.
Вона пересунула вказівник HEAD назад на гілку master, та повернула файли у вашій робочій теці до стану знімку, на який вказує master.
//This also means the changes you make from this point forward will diverge from an older version of the project.
Це також означає, що якщо ви зараз зробите нові зміни, вони будуть походити від ранішої версії проекту.
//It essentially rewinds the work you've done in your testing branch so you can go in a different direction.
Вона, суттєво, перемотує працю, що ви зробили у гілці testing, щоб ви могли працювати в іншому напрямку.

[NOTE]
//.Switching branches changes files in your working directory
.Переключення між гілками змінює файли у вашій робочій теці
====
//It's important to note that when you switch branches in Git, files in your working directory will change.
Важливо зауважити, що коли ви переключаєте гілки в Ґіт, файли у вашій робочій теці змінюються.
//If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
Якщо ви переключаєтесь до старшої гілки, ваша робоча тека буде повернута до того стаку, який був на момент останнього фіксування у тій гілці.
//If Git cannot do it cleanly, it will not let you switch at all.
Якщо Ґіт не може зробити це без проблем, він не дасть вам переключитися взагалі.
====

//Let's make a few changes and commit again:
Зробимо декілька змін та знову зафіксуємо:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Зробив інші зміни'
----

//Now your project history has diverged (see <<divergent_history>>).
Тепер історія вашого проекту розбіглася (`diverged`) (дивіться <<divergent_history>>).
//You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Ви створили гілку, дещо в ній зробили, переключились на головну гілку та зробили там щось інше.
//Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
Обидві зміни ізольовані в окремих гілках. Ви можете переключатись між цими гілками та злити їх, коли вони будуть готові.
//And you did all that with simple `branch`, `checkout`, and `commit` commands.
І все це ви зробили за допомогою простих команд `branch`, `checkout` та `commit`.

[[divergent_history]]
//.Divergent history
.Історія, що розбіглася
image::images/advance-master.png[Історія, що розбіглася.]

//You can also see this easily with the `git log` command.
Ви також можете легко це побачити за допомогою команди `git log`.
//If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.
Якщо ви виконаєте `git log --oneline --decorate --graph --all`, вона надрукує історію ваших фіксацій, покаже куди вказують ваші гілки та як розбіглася ваша історія.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) Зробив інші зміни
| * 87ab2 (testing) Зробив зміни
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

//Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Оскільки гілки в Ґіту це насправді простий файл, що містить 50 символів контрольної суми SHA-1 фіксації, на яку вказує, гілки дешево створювати та знищувати.
//Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).
Створити гілку так же швидко, як записати 41 байт до файлу (40 символів та символ нового рядку).

//This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
Це вражаюча відмінність від того, як більшість інших СВК працюють з гілками – зазвичай це потребує копіювання усіх файлів проекту в другу теку.
//This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Це може зайняти декілька секунда, або навіть хвилин, в залежності від розміру проекту, у той час як у Ґіту процес завжди миттєвий.
//Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
Також, оскільки ми записуємо батьків кожної фіксації, пошук відповідної бази для злиття може бути зроблено автоматично та зазвичай дуже просто.
//These features help encourage developers to create and use branches often.
Ці можливості допомагають заохотити розробників створювати та використовувати гілки часто.

//Let's see why you should do so.
Подивимось, чому і вам варто так робити.
